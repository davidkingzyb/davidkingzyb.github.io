<!DOCTYPE html>
<html>

<head>
    <title>Color Lesson</title>
    <link rel="stylesheet" href="../res/init.css">
    <link rel="stylesheet" href="../res/ui.css">
    <link rel="stylesheet" href="../res/global.css">
    <script src="https://cdn.jsdelivr.net/npm/@jaames/iro@5"></script>
    <style>
        #file {
            width: 200px;
        }

        .irocon {
            position: fixed;
            right: 0px;
            top: 0px;
            width: 250px;
        }

        .menucon {
            position: fixed;
            left: 0px;
            top: 0px;
        }

        .border_w {
            border: 1px solid white;
        }

        #info {
            height: 72px;
        }

        input[type="checkbox"] {
            border: 1px #6175F5 solid;
            border-radius: 0.2rem;
            zoom: 300%;
            margin: 0.1rem;
            width: 0.5rem;
            height: 0.5rem;
        }

        html {
            font-size: 16px;
        }

        body {
            color: white;
            overflow: hidden;
        }

        .dkz{
            position: fixed;
            bottom: 0px;
            margin: 0.5rem;
            font-size: 0.7rem;
            right:0px;
        }
        .help{
            position: fixed;
            bottom: 0;
            margin: 0.5rem;
            font-weight: bold;
            font-family: 'Impact';
        }
        .con{
            position: relative;
        }
    </style>
</head>

<body>

    <div class="con">
        <canvas id="canvas"></canvas>
    </div>
    <div class="menucon m1r">
        <input type='file' id='file'>
        <button id="load" class="pointer" onclick="load()">loadÔ∏è</button><br>
        <details open="true">
            <summary class="mt05r">Menu</summary>
            <div class="menu_pane">
                Palette: <input type="checkbox" id="palette"><br>
                Size: <span id="size">512</span>
                <button id="s128" onclick="setSize(128)">128</button>
                <button id="s256" onclick="setSize(256)">256</button>
                <button id="s512" onclick="setSize(512)">512</button>
                <button id="s1024" onclick="setSize(1024)">1024</button>
                <button id="s2048" onclick="setSize(2048)">2048</button>
                <br>
                Sampling Scale: <input type="number" id="sampling_scale" value="10"><br>
                Sampling Offset: <input type="number" id="sampling_offset" value="1"><br>
                Border: <input type="checkbox" id="border"><br>
                Gaussian: <input type="checkbox" id="sampling"><br>
                <button id="sampling" class="mt05r" onclick="sampling()" title="sampling">üè≥Ô∏è‚Äçüåà</button>
                <button class="mt05r" onclick="main3d()" title="render HSV in webgl">üåà</button>
                <button id="color_lesson" class="mt05r" onclick="doColorLesson()" title="save json for blender">üíø</button>

            </div>
        </details>
        <details open="true">
            <summary class="mt05r" onclick="removeTexture()">Texture</summary>
            <div id="texture_pane">

            </div>
            <canvas id="webgl3d" width="600px" height="500px" style="display:none;"></canvas>
        </details>
    </div>
    <div class="m1r irocon">
        <div>
            <input id="hex" class="mt05r" type="text">
            <canvas id="select_color" class="fr mt05r mb05r border_w" width="50" height="100"></canvas>
        </div>
        <div id="info" class="mb05r mt05r c_white">
        </div>

        <div class="Grid">
            <details open="true">
                <summary class="mt06r">HUE</summary>
                <div class="ColorPicker" id="defaultPicker">
                </div>
            </details>
            <details>
                <summary class="mt05r">HSV</summary>
                <div class="ColorPicker" id="boxPicker">
                </div>
                <br>
                <div class="ColorPicker" id="sliderPicker">
                </div>
            </details>
        </div>
    </div>
    <a href="https://davidkingzyb.github.io/blogmd/45.html" class="help">Color Lesson</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    <a class="dkz" href="https://davidkingzyb.tech">2024 by DKZ</a>
    <script>
        // iro
        // HSV
        var defaultPicker = new iro.ColorPicker("#defaultPicker", {
            width: 250,
            color: "rgb(255, 0, 0)",
            borderWidth: 1,
            borderColor: "#fff",
        });
        // Box 
        var boxPicker = new iro.ColorPicker("#boxPicker", {
            width: 250,
            color: "rgb(255, 0, 0)",
            borderWidth: 1,
            borderColor: "#fff",
            layout: [
                {
                    component: iro.ui.Box,
                },
                {
                    component: iro.ui.Slider,
                    options: {
                        id: 'hue-slider',
                        sliderType: 'hue'
                    }
                }
            ]
        });
        //HSV
        var sliderPicker = new iro.ColorPicker("#sliderPicker", {
            width: 250,
            color: "rgb(255, 0, 0)",
            borderWidth: 1,
            borderColor: "#fff",
            layout: [
                // {
                //   component: iro.ui.Slider,
                //   options: {
                //     sliderType: 'hue'
                //   }
                // },
                {
                    component: iro.ui.Slider,
                    options: {
                        sliderType: 'saturation'
                    }
                },
                {
                    component: iro.ui.Slider,
                    options: {
                        sliderType: 'value'
                    }
                },
                {
                    component: iro.ui.Slider,
                    options: {
                        sliderType: 'alpha'
                    }
                },
            ]
        });
        var $info = document.getElementById('info')
        var $hex = document.getElementById('hex')
        $hex.onblur = function () {
            var c = new iro.Color($hex.value)
            onColorChange(c)
        }
        function onColorChange(color) {
            //console.log(color)
            defaultPicker.setColors([color.rgba])
            boxPicker.setColors([color.rgba])
            sliderPicker.setColors([color.rgba])
            $info.innerHTML = `${color.rgbaString}<br>hsla(${color.hsla.h},${color.hsla.s},${color.hsla.l},${color.hsla.a})<br>hsva(${parseInt(color.hsva.h)},${parseInt(color.hsva.s)},${parseInt(color.hsva.v)},${color.hsva.a})`;
            $hex.value = color.hexString;
            $select_color = document.getElementById('select_color')
            $select_color_ctx = $select_color.getContext('2d')
            $select_color_ctx.fillRect(0, 0, 50, 100)
            $select_color_ctx.fillStyle = color.hexString
            $select_color_ctx.fillRect(0, 0, 50, 50)
        }
        boxPicker.on('color:change', onColorChange);
        defaultPicker.on('color:change', onColorChange);
        sliderPicker.on('color:change', onColorChange);
    </script>
    <script>
        // canvas
        var $canvas = document.getElementById('canvas')
        var $ctx = $canvas.getContext('2d')
        function load() {
            var $file = document.getElementById('file')

            var r = new FileReader()
            r.onload = function (e) {
                var img = new Image()
                img.src = e.target.result
                img.onload = drawImageActualSize

            }
            r.readAsDataURL($file.files[0])
        }

        $canvas.onmousedown = function (e) {
            var data = $ctx.getImageData(e.offsetX, e.offsetY, 1, 1).data
            var c = new iro.Color({ 'r': data[0], 'g': data[1], 'b': data[2], 'a': data[3] })
            onColorChange(c)
        }

        function drawImageActualSize() {
            $canvas.width = this.naturalWidth;
            $canvas.height = this.naturalHeight;
            $ctx.drawImage(this, 0, 0, this.width, this.height);
            console.log(this.naturalHeight, this.naturalWidth, this.width, this.height)
        }

        var startx = 0;
        var starty = 0;
        var currentX = 0;
        var currentY = 0;

        var $con = document.querySelector('.con');
        $con.addEventListener('mousedown', (e) => {
            if (e.button === 1) { // Ê£ÄÊü•ÊòØÂê¶ÊòØÈº†Ê†á‰∏≠ÈîÆ
                startx = e.clientX - currentX;
                starty = e.clientY - currentY;
            }
        });

        document.addEventListener('mouseup', () => {
            startx = 0;
            starty = 0;
        });

        document.addEventListener('mousemove', (e) => {
            if (startx && starty) {
                $con.style.left = e.clientX - startx + 'px';
                $con.style.top = e.clientY - starty + 'px';

                currentX = parseFloat($con.style.left);
                currentY = parseFloat($con.style.top);
            }
        });
        var scale = 1
        $con.addEventListener('wheel', function (event) {
            event.preventDefault();
            if (event.deltaY < 0) {
                scale += 0.1;
            } else {
                scale -= 0.1;
                if (scale < 0.1) {
                    scale = 0.1; // Èò≤Ê≠¢Áº©ÊîæËøáÂ∞è
                }
            }
            $con.style.transform = `scale(${scale})`;
        });
    </script>
    <script>
        // Texture
        var size = 512;
        var sampling_scale = parseInt($canvas.width / (size / 10))
        var $sampling_scale = document.getElementById('sampling_scale')
        var $sampling_offset = document.getElementById('sampling_offset')
        function setSize(s) {
            size = s;
            $size = document.getElementById('size')
            $size.innerHTML = size;
            var isPalette = document.getElementById('palette').checked;
            if (isPalette) {
                sampling_scale = parseInt($canvas.width / (size / 10))
            } else {
                sampling_scale = parseInt($canvas.width / size)
            }
            $sampling_scale.value = sampling_scale
        }

        var $texture_pane = document.getElementById('texture_pane')
        function removeTexture(){
            $texture_pane.innerHTML=""
        }
        function sampling() {
            var isBorder = document.getElementById('border').checked;
            var isSampling = document.getElementById('sampling').checked;

            console.log(size, isBorder, isSampling, $sampling_scale.value)
            var downSampledCanvas;
            if (isSampling) {
                const sourceImageData = $ctx.getImageData(0, 0, $canvas.width, $canvas.height);
                downSampledCanvas = downSampledWithGaussian(sourceImageData, parseInt($sampling_scale.value));
            } else {
                downSampledCanvas = getSampled($canvas, parseInt($sampling_scale.value), parseInt($sampling_offset.value));
            }
            $texture_pane.appendChild(downSampledCanvas);
            var isPalette = document.getElementById('palette').checked;
            if (isPalette) {
                drawTexture(downSampledCanvas, isBorder, 10)
            }else{
                $color_lesson_canvas=downSampledCanvas;
            }


        }
        var $color_lesson_canvas;
        function drawTexture(canvas, isBorder, box_size) {
            $color_lesson_canvas = canvas
            const $texture = document.createElement('canvas');
            $texture.width = size;
            $texture.height = size;
            const octx = $texture.getContext('2d')
            const ictx = canvas.getContext('2d')
            var offset = Math.floor((size % box_size) / 2)
            octx.fillStyle = '#ffffff';
            octx.fillRect(0, 0, size, offset)
            octx.fillRect(0, 0, offset, size)
            for (let x = 0; x < canvas.width; x++) {
                for (let y = 0; y < canvas.height; y++) {
                    let data = ictx.getImageData(x + 1, y + 1, 1, 1).data
                    var c = new iro.Color({ 'r': data[0], 'g': data[1], 'b': data[2], 'a': data[3] })
                    octx.fillStyle = c.hexString;
                    octx.fillRect(offset + x * box_size, offset + y * box_size, box_size, box_size);
                    if (isBorder) {
                        octx.fillStyle = '#ffffff';
                        octx.fillRect(offset + box_size - 1 + x * box_size, offset + y * box_size, 1, box_size + 1)
                        octx.fillRect(offset + x * box_size, offset + box_size - 1 + y * box_size, 1 + box_size, 1)
                    }
                }
            }
            $texture_pane.appendChild($texture);
            $texture.onmousedown = function (e) {
                var data = octx.getImageData(e.offsetX, e.offsetY, 1, 1).data
                var c = new iro.Color({ 'r': data[0], 'g': data[1], 'b': data[2], 'a': data[3] })
                ColorLesson(octx.getImageData(e.offsetX, e.offsetY, 3, 3).data)
                onColorChange(c)
            }
        }

        function doColorLesson() {
            var data = $color_lesson_canvas.getContext('2d').getImageData(0, 0, $color_lesson_canvas.width, $color_lesson_canvas.height).data
            var result = ColorLesson(data)
            saveStringToFile('color_lesson.json', result)
            var $a = document.createElement('a');
            $a.href = $color_lesson_canvas.toDataURL()
            $a.download = 'color_lesson.png'
            $a.click()

        }

        function ColorLesson(colors) {
            var result = '{"d":['
            var color = []
            for (let c of colors) {
                if (color.length == 4) {
                    let hsv = RGB2HSV(color[0], color[1], color[2])
                    //hsv2xyz
                    let x = Math.cos(hsv[0] * 2 * Math.PI - Math.PI) * hsv[1] * 10
                    let y = Math.sin(hsv[0] * 2 * Math.PI - Math.PI) * hsv[1] * 10
                    //console.log('rgb',color[0],color[1],color[2],'hsv',hsv[0],hsv[1],hsv[2],'xyz',x,y,hsv[2]*10)
                    result += `[${x.toFixed(3)},${y.toFixed(3)},${(hsv[2] * 10).toFixed(3)}],`
                    color = [c]
                } else {
                    color.push(c)
                }
            }
            result = result.slice(0, -1) + ']}'
            return result
        }

        function saveStringToFile(filename, content) {
            var blob = new Blob([content], { type: "text/plain;charset=utf-8" });
            var url = URL.createObjectURL(blob);
            var link = document.createElement('a');
            link.href = url;
            link.download = filename;
            link.click();
        }

        function getSampled(sourceCanvas, scaleFactor, offset) {
            console.log('getSampled', scaleFactor, offset)
            const sourceWidth = sourceCanvas.width;
            const sourceHeight = sourceCanvas.height;

            const targetWidth = Math.floor(sourceWidth / scaleFactor);
            const targetHeight = Math.floor(sourceHeight / scaleFactor);

            const targetCanvas = document.createElement('canvas');
            targetCanvas.width = targetWidth;
            targetCanvas.height = targetHeight;
            const targetContext = targetCanvas.getContext('2d');
            var target_data = targetContext.getImageData(0, 0, targetWidth, targetHeight)

            const intermediateContext = sourceCanvas.getContext('2d')
            for (let x = 0; x < targetWidth; x++) {
                for (let y = 0; y < targetHeight; y++) {
                    let data = intermediateContext.getImageData(offset + x * scaleFactor + 1, offset + y * scaleFactor + 1, 1, 1).data
                    var c = new iro.Color({ 'r': data[0], 'g': data[1], 'b': data[2], 'a': data[3] })
                    targetContext.fillStyle = c.hexString;
                    targetContext.fillRect(x + 1, y + 1, 1, 1);
                }
            }
            return targetCanvas
        }

        // È´òÊñØÂç∑ÁßØÊ†∏ÂõæÂÉè‰∏ãÈááÊ†∑ÁÆóÊ≥ï
        function downSampledWithGaussian(sourceImageData, scaleFactor) {
            const sourceWidth = sourceImageData.width;
            const sourceHeight = sourceImageData.height;

            const targetWidth = Math.floor(sourceWidth / scaleFactor);
            const targetHeight = Math.floor(sourceHeight / scaleFactor);

            const targetCanvas = document.createElement('canvas');
            targetCanvas.width = targetWidth;
            targetCanvas.height = targetHeight;
            const targetContext = targetCanvas.getContext('2d');
            var target_data = targetContext.getImageData(0, 0, targetWidth, targetHeight)

            const intermediateCanvas = document.createElement('canvas');
            intermediateCanvas.width = sourceWidth;
            intermediateCanvas.height = sourceHeight;
            const intermediateContext = intermediateCanvas.getContext('2d');
            intermediateContext.putImageData(sourceImageData, 0, 0);
            const intermediateImageData = intermediateContext.getImageData(0, 0, sourceWidth, sourceHeight);
            const intermediateData = intermediateImageData.data;
            // È´òÊñØÂç∑ÁßØÊ†∏
            const kernel = [
                [1, 2, 1],
                [2, 4, 2],
                [1, 2, 1]
            ];

            for (let y = 0; y < targetHeight; y++) {
                for (let x = 0; x < targetWidth; x++) {
                    let red = 0;
                    let green = 0;
                    let blue = 0;
                    let alpha = 0;

                    for (let j = 0; j < 3; j++) {
                        for (let i = 0; i < 3; i++) {
                            const sourceX = x * scaleFactor + i - 1;
                            const sourceY = y * scaleFactor + j - 1;

                            const offset = (sourceY * sourceWidth + sourceX) * 4;
                            const kernelValue = kernel[j][i];

                            red += intermediateData[offset] * kernelValue;
                            green += intermediateData[offset + 1] * kernelValue;
                            blue += intermediateData[offset + 2] * kernelValue;
                            alpha += intermediateData[offset + 3] * kernelValue;
                        }
                    }

                    const targetOffset = (y * targetWidth + x) * 4;
                    const kernelSum = 16; // È´òÊñØÂç∑ÁßØÊ†∏ÁöÑÂíå

                    target_data.data[targetOffset] = red / kernelSum;
                    target_data.data[targetOffset + 1] = green / kernelSum;
                    target_data.data[targetOffset + 2] = blue / kernelSum;
                    target_data.data[targetOffset + 3] = alpha / kernelSum;
                }
            }
            targetContext.putImageData(target_data, 0, 0)

            return targetCanvas;
        }

        function RGB2HSV(r, g, b) {
            r /= 255, g /= 255, b /= 255;

            let max = Math.max(r, g, b), min = Math.min(r, g, b);
            let h, s, v = max;

            let d = max - min;
            s = max == 0 ? 0 : d / max;

            if (max == min) {
                h = 0; // achromatic
            } else {
                switch (max) {
                    case r: h = (g - b) / d + (g < b ? 6 : 0); break;
                    case g: h = (b - r) / d + 2; break;
                    case b: h = (r - g) / d + 4; break;
                }
                h /= 6;
            }

            return [h, s, v];//0~1
        }

        function HSV2RGB(h, s, v) {
            let r, g, b;

            let i = Math.floor(h * 6);
            let f = h * 6 - i;
            let p = v * (1 - s);
            let q = v * (1 - f * s);
            let t = v * (1 - (1 - f) * s);

            switch (i % 6) {
                case 0: r = v, g = t, b = p; break;
                case 1: r = q, g = v, b = p; break;
                case 2: r = p, g = v, b = t; break;
                case 3: r = p, g = q, b = v; break;
                case 4: r = t, g = p, b = v; break;
                case 5: r = v, g = p, b = q; break;
            }

            return [r, g, b];//0~1
        }

    </script>
    <script>
        //3d

function WebglColorLesson() {
    var data = $color_lesson_canvas.getContext('2d').getImageData(0, 0, $color_lesson_canvas.width, $color_lesson_canvas.height).data
    var colors = []
    var vertices = []
    var color = []
    for (let c of data) {
        if (color.length == 4) {
            let hsv = RGB2HSV(color[0], color[1], color[2])
            //hsv2xyz
            let x = Math.cos(hsv[0] * 2 * Math.PI - Math.PI) * hsv[1] * 10
            let y = Math.sin(hsv[0] * 2 * Math.PI - Math.PI) * hsv[1] * 10
            // console.log('rgb',color[0],color[1],color[2],'hsv',hsv[0],hsv[1],hsv[2],'xyz',x,y,hsv[2]*10)
            colors = colors.concat([color[0], color[1], color[2]])
            vertices = vertices.concat([x * 20, -hsv[2] * 200, y * 20])//Áº©Êîæ
            color = [c]
        } else {
            color.push(c)
        }
    }
    return [vertices, colors]
}

var Ctrl3d = function () {
    this.f = 0.0;
    this.x = 0;
    this.y = -50;
    this.z = -500;
    this.rx = 222;
    this.ry = 127;
    this.rz = 0;
    this.sx = 1;
    this.sy = 1;
    this.sz = 1;
    this.fieldOfViewRadians = degToRad(60);
}
var ctrl3d = new Ctrl3d();

var sv3dsource = `
attribute vec4 a_position;
attribute vec4 a_color;
 
uniform mat4 u_matrix;
 
varying vec4 v_color;
 
void main() {
  gl_Position = u_matrix * a_position;
  gl_PointSize = 2.0;
  v_color = a_color;
}
`
var sf3dsource = `
precision mediump float;
varying vec4 v_color;
 
void main() {
   gl_FragColor = v_color;
   //gl_FragColor=vec4(1.0,0,0,1);
}
`
function main3d() {
    var [vertices, colors] = WebglColorLesson()
    var canvas = document.getElementById("webgl3d");
    var gl = canvas.getContext("webgl");
    canvas.style.display = 'block';

    gl.enable(gl.CULL_FACE);
    gl.enable(gl.DEPTH_TEST);

    var sv3d = createShader(gl, sv3dsource, gl.VERTEX_SHADER);
    var sf3d = createShader(gl, sf3dsource, gl.FRAGMENT_SHADER);

    var program = createProgram(gl, sv3d, sf3d);
    gl.useProgram(program);

    var positionLocation = gl.getAttribLocation(program, "a_position");
    var colorLocation = gl.getAttribLocation(program, "a_color");
    var matrixLocation = gl.getUniformLocation(program, "u_matrix");

    var buffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);

    gl.enableVertexAttribArray(positionLocation);
    gl.vertexAttribPointer(positionLocation, 3, gl.FLOAT, false, 0, 0);
    gl.bufferData(
        gl.ARRAY_BUFFER,
        new Float32Array(vertices),
        gl.STATIC_DRAW);

    var buffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
    gl.enableVertexAttribArray(colorLocation);
    // We'll supply RGB as bytes.
    gl.vertexAttribPointer(colorLocation, 3, gl.UNSIGNED_BYTE, true, 0, 0);
    gl.bufferData(
        gl.ARRAY_BUFFER,
        new Uint8Array(colors),
        gl.STATIC_DRAW);

    var translation = [-150, 0, -360];
    var rotation = [degToRad(190), degToRad(40), degToRad(320)];
    var scale = [1, 1, 1];
    var fieldOfViewRadians = degToRad(90);

    gl3d = gl;
    matrixLocation3d = matrixLocation;
    ctrl3d.fieldOfViewRadians = fieldOfViewRadians;

    canvas.addEventListener("wheel", function (e) {
        ctrl3d.ry -= e.deltaY / 10;
        ctrl3d.rx -= e.deltaX / 100;
        draw3dScene(vertices.length / 3);
    })

    draw3dScene(vertices.length / 3);

}

function draw3dScene(pointcount) {
    resizeCanvasToDisplaySize(gl3d.canvas);

    gl3d.viewport(0, 0, gl3d.canvas.width, gl3d.canvas.height);

    gl3d.clear(gl3d.COLOR_BUFFER_BIT | gl3d.DEPTH_BUFFER_BIT);

    var aspect = gl3d.canvas.clientWidth / gl3d.canvas.clientHeight;
    // var projectionMatrix = makePerspective(ctrl3d.fieldOfViewRadians, aspect, 1, 2000);
    var projectionMatrix = makeOrthographic(-gl3d.canvas.clientWidth/2,gl3d.canvas.clientWidth/2,-gl3d.canvas.clientHeight/2,gl3d.canvas.clientHeight/2,1,2000);
    var translationMatrix =
        matrix3dTranslation(ctrl3d.x, ctrl3d.y, ctrl3d.z);
    var rotationXMatrix = matrix3dXRotation(degToRad(ctrl3d.rx));
    var rotationYMatrix = matrix3dYRotation(degToRad(ctrl3d.ry));
    var rotationZMatrix = matrix3dZRotation(degToRad(ctrl3d.rz));
    var scaleMatrix = matrix3dScale(ctrl3d.sx, ctrl3d.sy, ctrl3d.sz);

    var matrix = matrixMultiply4x4(scaleMatrix, rotationZMatrix);
    matrix = matrixMultiply4x4(matrix, rotationYMatrix);
    matrix = matrixMultiply4x4(matrix, rotationXMatrix);
    matrix = matrixMultiply4x4(matrix, translationMatrix);
    matrix = matrixMultiply4x4(matrix, projectionMatrix);
    // console.log(matrix);

    gl3d.uniformMatrix4fv(matrixLocation3d, false, matrix);

    gl3d.drawArrays(gl3d.POINTS, 0, pointcount);
}

function createShader(gl, sourceCode, type) {
    // Compiles either a shader of type gl.VERTEX_SHADER or gl.FRAGMENT_SHADER
    var shader = gl.createShader(type);
    gl.shaderSource(shader, sourceCode);
    gl.compileShader(shader);
    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
        var info = gl.getShaderInfoLog(shader);
        throw "Could not compile WebGL program. \n\n" + info;
    }
    return shader;
}

function createProgram(gl, vertexShader, fragmentShader) {
    var program = gl.createProgram();
    gl.attachShader(program, vertexShader);
    gl.attachShader(program, fragmentShader);
    gl.linkProgram(program);
    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
        throw ("program filed to link:" + gl.getProgramInfoLog(program));
    }

    return program;
}

//==================function================================
function resizeCanvasToDisplaySize(canvas) {
    multiplier = 1;
    var width = canvas.clientWidth * multiplier | 0;
    var height = canvas.clientHeight * multiplier | 0;
    if (canvas.width !== width || canvas.height !== height) {
        canvas.width = width;
        canvas.height = height;
        return true;
    }
    return false;
}

function matrixMultiply3x3(l, r) {
    var m = [
        0, 0, 0,
        0, 0, 0,
        0, 0, 0
    ];
    m[0] = l[0] * r[0] + l[1] * r[3] + l[2] * r[6];
    m[1] = l[0] * r[1] + l[1] * r[4] + l[2] * r[7];
    m[2] = l[0] * r[2] + l[1] * r[5] + l[2] * r[8];
    m[3] = l[3] * r[0] + l[4] * r[3] + l[5] * r[6];
    m[4] = l[3] * r[1] + l[4] * r[4] + l[5] * r[7];
    m[5] = l[3] * r[2] + l[4] * r[5] + l[5] * r[8];
    m[6] = l[6] * r[0] + l[7] * r[3] + l[8] * r[6];
    m[7] = l[6] * r[1] + l[7] * r[4] + l[8] * r[7];
    m[8] = l[6] * r[2] + l[7] * r[5] + l[8] * r[8];
    return m;
}

function matrixMultiply4x4(l, r) {
    var m = [
        0, 0, 0, 0,
        0, 0, 0, 0,
        0, 0, 0, 0,
        0, 0, 0, 0
    ];
    m[0] = l[0] * r[0] + l[1] * r[4] + l[2] * r[8] + l[3] * r[12];
    m[1] = l[0] * r[1] + l[1] * r[5] + l[2] * r[9] + l[3] * r[13];
    m[2] = l[0] * r[2] + l[1] * r[6] + l[2] * r[10] + l[3] * r[14];
    m[3] = l[0] * r[3] + l[1] * r[7] + l[2] * r[11] + l[3] * r[15];
    m[4] = l[4] * r[0] + l[5] * r[4] + l[6] * r[8] + l[7] * r[12];
    m[5] = l[4] * r[1] + l[5] * r[5] + l[6] * r[9] + l[7] * r[13];
    m[6] = l[4] * r[2] + l[5] * r[6] + l[6] * r[10] + l[7] * r[14];
    m[7] = l[4] * r[3] + l[5] * r[7] + l[6] * r[11] + l[7] * r[15];
    m[8] = l[8] * r[0] + l[9] * r[4] + l[10] * r[8] + l[11] * r[12];
    m[9] = l[8] * r[1] + l[9] * r[5] + l[10] * r[9] + l[11] * r[13];
    m[10] = l[8] * r[2] + l[9] * r[6] + l[10] * r[10] + l[11] * r[14];
    m[11] = l[8] * r[3] + l[9] * r[7] + l[10] * r[11] + l[11] * r[15];
    m[12] = l[12] * r[0] + l[13] * r[4] + l[14] * r[8] + l[15] * r[12];
    m[13] = l[12] * r[1] + l[13] * r[5] + l[14] * r[9] + l[15] * r[13];
    m[14] = l[12] * r[2] + l[13] * r[6] + l[14] * r[10] + l[15] * r[14];
    m[15] = l[12] * r[3] + l[13] * r[7] + l[14] * r[11] + l[15] * r[15];
    return m;
}

function createShader(gl, sourceCode, type) {
    // Compiles either a shader of type gl.VERTEX_SHADER or gl.FRAGMENT_SHADER
    var shader = gl.createShader(type);
    gl.shaderSource(shader, sourceCode);
    gl.compileShader(shader);

    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
        var info = gl.getShaderInfoLog(shader);
        throw "Could not compile WebGL program. \n\n" + info;
    }
    return shader;
}

function createProgram(gl, vertexShader, fragmentShader) {
    var program = gl.createProgram();

    gl.attachShader(program, vertexShader);
    gl.attachShader(program, fragmentShader);

    gl.linkProgram(program);


    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
        throw ("program filed to link:" + gl.getProgramInfoLog(program));
    }

    return program;
}

function matrix2dTranslation(tx, ty) {
    return [
        1, 0, 0,
        0, 1, 0,
        tx, ty, 1
    ];
}

function matrix2dRotation(angleInRadians) {
    var c = Math.cos(angleInRadians);
    var s = Math.sin(angleInRadians);
    return [
        c, -s, 0,
        s, c, 0,
        0, 0, 1
    ];
}

function matrix2dScale(sx, sy) {
    return [
        sx, 0, 0,
        0, sy, 0,
        0, 0, 1
    ];
}

function matrix3dTranslation(tx, ty, tz) {
    return [
        1, 0, 0, 0,
        0, 1, 0, 0,
        0, 0, 1, 0,
        tx, ty, tz, 1
    ];
}

function matrix3dXRotation(angleInRadians) {
    var c = Math.cos(angleInRadians);
    var s = Math.sin(angleInRadians);

    return [
        1, 0, 0, 0,
        0, c, s, 0,
        0, -s, c, 0,
        0, 0, 0, 1
    ];
};

function matrix3dYRotation(angleInRadians) {
    var c = Math.cos(angleInRadians);
    var s = Math.sin(angleInRadians);

    return [
        c, 0, -s, 0,
        0, 1, 0, 0,
        s, 0, c, 0,
        0, 0, 0, 1
    ];
};

function matrix3dZRotation(angleInRadians) {
    var c = Math.cos(angleInRadians);
    var s = Math.sin(angleInRadians);
    return [
        c, s, 0, 0, -s, c, 0, 0,
        0, 0, 1, 0,
        0, 0, 0, 1,
    ];
}

function matrix3dScale(sx, sy, sz) {
    return [
        sx, 0, 0, 0,
        0, sy, 0, 0,
        0, 0, sz, 0,
        0, 0, 0, 1,
    ];
}

function makePerspective(fieldOfViewInRadians, aspect, near, far) {
    var f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewInRadians);
    var rangeInv = 1.0 / (near - far);

    return [
        f / aspect, 0, 0, 0,
        0, f, 0, 0,
        0, 0, (near + far) * rangeInv, -1,
        0, 0, near * far * rangeInv * 2, 0
    ];
};

function makeOrthographic(left, right, bottom, top, near, far) {
    return [
        2 / (right - left), 0, 0, 0,
        0, 2 / (top - bottom), 0, 0,
        0, 0, 2 / (near - far), 0,

        (left + right) / (left - right),
        (bottom + top) / (bottom - top),
        (near + far) / (near - far),
        1,
    ];
}

function radToDeg(r) {
    return r * 180 / Math.PI;
}

function degToRad(d) {
    return d * Math.PI / 180;
}
    </script>
</body>

</html>