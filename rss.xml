<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
<channel>
    <title>DKZ's Blog</title>
    <link>http://davidkingzyb.github.io/blog.html</link>
    <description>Tech Program Design 造物</description>
    <copyright>(c)2015-2023 by DKZ</copyright>
    <image>
        <url>http://davidkingzyb.github.io/res/img/cubehead.png</url>
        <title>DKZ</title>
        <link>http://davidkingzyb.github.io/blog.html</link>
    </image>
<item><title>Welcome to DKZ's Blog</title><link>http://davidkingzyb.github.io/blogmd/0.html</link><description>Welcome

##DKZ

**email.** davidkingzyb@qq.com

**github.** https://github.com/davidkingzyb

**weibo &amp; twitter.** @\_\_DKZ\_\_...


link: http://davidkingzyb.github.io/blogmd/0.html</description></item><item><title>canvasTrigger</title><link>http://davidkingzyb.github.io/blogmd/6.html</link><description>define objects in canvas and dispatch canvas event to those objects.
[github](https://github.com/davidkingzyb/canvasTrigger)

###List

* **canvasTrigger** define objects in canvas and dispatch canvas event to those objects.

* **animationsCtrl** nimation controler to control frame animation

###Guide

####canvasTrigger

canvasTigger是一个用于在canvas标签内部定义对象并将浏览器的事件分发给这些对象的工具。

基于observe模式设计。轻量级核心代码仅150行。具有良好扩展性，可自己定义形状、线段、图片等对象。包含简单的基于时间的帧动画和可视化编辑方法。

#####quick example

	var ctcanvas=new ctCanvas('canvas');
    ctcanvas.addTrigger('click');

    var a=new ctFillRect(100,100,200,200,'#f00');
...


link: http://davidkingzyb.github.io/blogmd/6.html</description></item><item><title>开张</title><link>http://davidkingzyb.github.io/blogmd/2.html</link><description>Hello World!
我有三年没有写任何东西了，好像没什么可以说的。感觉自己基本上定型了，从无意识的到潜意识的，我能认知和意识到的一切。人生观价值观世界观，前路未来命运。坚信的只会更坚信，怀疑的依旧很怀疑。等待时间修正我的路，穿过未知，立于这世间，Hello World！

主要是分享一些自己的作品和一些技术上的问题吧。

可以通过底部contact联系我...


link: http://davidkingzyb.github.io/blogmd/2.html</description></item><item><title>INDIE GAME CUBEX3</title><link>http://davidkingzyb.github.io/blogmd/5.html</link><description>有关独立游戏CUBEX3的一切

##CUBEX3

起初神创造天地

地是空虚混沌 渊面黑暗

神说 要有光

有了光再制作这个世界的

一草一木 动物和人

吃人的怪物和温暖的家

再放入云与风 

让日升日落 时空流转

这个世界就活了

##造物快感
...


link: http://davidkingzyb.github.io/blogmd/5.html</description></item><item><title>Meiriq Game List</title><link>http://davidkingzyb.github.io/blogmd/10.html</link><description>我在每日Q做的消遣小游戏
以下是我在每日Q制作的无聊小游戏列表，按时间顺序排列。

其中大多使用了[egretInit](https://github.com/davidkingzyb/egretInit)这个工具库以快速构建egret项目

感谢制作这些游戏的参与者，以及提供我帮助的人。

* [solardefence](http://gameslibrary.meiriq.com/home/g/600)
* [findspy](http://gameslibrary.meiriq.com/home/g/604)
* [doublecolor](http://gameslibrary.meiriq.com/home/g/621)
* [strata](http://gameslibrary.meiriq.com/home/g/626)
* [cubejump](http://gameslibrary.meiriq.com/home/g/644)
* [qiuqiu](http://gameslibrary.meiriq.com/home/g/655)
* [fallingshit](http://gameslibrary.meiriq.com/home/g/658)
* [hotteacher](http://gameslibrary.meiriq.com/home/g/664)
* [moonfish](http://gameslibrary.meiriq.com/home/g/665)
* [aution](http://gameslibrary.meiriq.com/home/g/669)
* [floor](http://gameslibrary.meiriq.com/home/g/672)
* [ET](http://gameslibrary.meiriq.com/home/g/676)
* [escape](http://gameslibrary.meiriq.com/home/g/678)
* [fightbird](https://davidkingzyb.github.io/egretInit)

##ios
...


link: http://davidkingzyb.github.io/blogmd/10.html</description></item><item><title> isometric projection</title><link>http://davidkingzyb.github.io/blogmd/8.html</link><description>等角投影制作egret伪3D游戏
最近在制作一款类似cubejump的游戏伪3D游戏，接下来cubex3的手机版也要想要使用等角投影制作。

感谢剑龙写的egret版本的等角投影库，我简单研究了下原理，可能下面的笔记会有错误，具体请参考《Flash ActionScript 3.0 动画高级教程》

简单的说等角变换是将三维世界的点变化成为二维平面上的坐标来确定对象的位置，在游戏中实现伪3D效果

##原理

三维空间点p(px,py,pz)沿y轴旋转angleY沿x轴旋转angleX得到二维平面上点(x,y)和深度z

x=px*cos(angleY)-pz*sin(angleY)

tempz=pz*cos(angleY)+px*sin(angleY)

y=py*cos(angleX)-tempz*sin(angleX)

z=tempz*cos(angleX)+py*sin(angleX)

等角变换angleY=45°，angleX=-30°带入消去tempz再乘2的平方根（变为2等角，w=h*2）

最终化简为：

...


link: http://davidkingzyb.github.io/blogmd/8.html</description></item><item><title> egretInit</title><link>http://davidkingzyb.github.io/blogmd/4.html</link><description>Build egret project quickly.
[github](https://github.com/davidkingzyb/egretInit)

[demo](https://davidkingzyb.github.io/egretInit)

##List

* **demo** An egret demo game build by egretInit 

* **egretInit** An example of egret project base on egret 2.5.x

* **Iso** egret isometric projection library.

***

* **debug.ts** debug egret project

* **tool.ts** egret tools for Initialize standard egret Object

* **component.ts** some useful components like air button

* **animation.ts** Time-based Animation Controler

...


link: http://davidkingzyb.github.io/blogmd/4.html</description></item><item><title>Contact</title><link>http://davidkingzyb.github.io/blogmd/1.html</link><description>Welcome to DKZ's Home



##DKZ


**email.** davidkingzyb@qq.com

**github.** [https://github.com/davidkingzyb](https://github.com/davidkingzyb)

**weibo &amp; twitter.** @\_\_DKZ\_\_


**home** [http://davidkingzyb.github.io/home.html](http://davidkingzyb.github.io/home.html)

**WO.IO** [http://davidkingzyb.github.io/wo.io](http://davidkingzyb.github.io/wo.io)...


link: http://davidkingzyb.github.io/blogmd/1.html</description></item><item><title>DKZ's HOME</title><link>http://davidkingzyb.github.io/blogmd/7.html</link><description>改版我的主页

特别热衷于做这件事，展示分享或者说是炫耀吧(没错就是这么自恋！我最帅！

说真的做这件事的意义真不大，更多是为了自己开心从单调的工作中跳出来。至于多少人能看到？是否真的可以改变世界？我会不会红？真的说不准

update 2016/1/24 想做一个CUI的界面。也许这会是未来，说未来也许大了点我并不能够将世界扛在肩上，只管去做，也许是一个程序员的一厢情愿吧。总之最近在学些新东西，大概是flask和tornado选一个，再看看react吧。

##介绍一下改版内容

* 从sae转移到了github page上，除了发布更新方便之外也希望新的平台有更多人关注吧。

* 用了新的主题“阴·阳”全是黑白灰，真的做的东西越来越素了，是长期没有性生活变得性冷淡了吧。

* 使用了自己的全屏滚动代替之前使用的fullpage

* 在之前的基础上重新排了内容。把之前比较混乱的作品和经历部分整合到了一个页面中。使用timeline切换展示，精简内容，更有条理，易于扩展。

* 使用canvas重构了技能树部分，为此写了个工具canvasTrigger，重置了自己的技能点，也是给未来的学习提供一个方向吧。

* contact页用了cubex3中的css-transform+css-spirit和之前设想的使用webgl不太一样，这块慢慢学吧。

* 主页也偷懒用了blog的开头，效果还不错。之后可能会用我的头像代替吧，我这么帅。
...


link: http://davidkingzyb.github.io/blogmd/7.html</description></item><item><title>PayPal支付</title><link>http://davidkingzyb.github.io/blogmd/3.html</link><description>PayPal支付和PayPal-python-SDK使用
PayPal提供完善的支付接口和[文档支持](https://developer.paypal.com/docs/)

在构建一个支付系统之前，首先要在PayPal上注册个人高级账号并创建应用，PayPal会提供唯一的client_id和client_secret供构建支付使用。执行支付之前PayPal要求使用client_id和client_secret获得一个access token，通过这个access token就可以调用PayPal的支付接口了。

PayPal支付流程主要分为以下三步：

1. 创建并向PayPal传送一个支付请求。
2. 跳转到PayPal页面，PayPal引导用户完成支付。
3. 支付成功跳转至支付处理成功界面或支付失败跳转到支付失败界面。

##PayPal-python-SDK介绍及使用

PayPal为开发者提供多种编程语言的SDK，其中封装了PayPal的支付接口，直接供用户调用完成支付。[查看更多SDK使用方法和说明](https://github.com/paypal/PayPal-Python-SDK)。

### 使用client_id和client_secret获得access token：

```
import paypalrestsdk
paypalrestsdk.configure({
    'mode': 'sandbox',
    'client_id': 'AQkquBDf1zctJOWGKWUEtKXm6qVhueUEMvXO_-MCI4DQQ4-LWvkDLIN2fGsd',
    'client_secret': 'EL1tVxAjhT7cJimnz5-Nsx9k2reTKSVfErNQF-CmrwJgxRtylkGTKlU4RvrX'
...


link: http://davidkingzyb.github.io/blogmd/3.html</description></item><item><title>作弊玩家</title><link>http://davidkingzyb.github.io/blogmd/9.html</link><description>作弊玩家是我的游戏id，我是作弊玩家。
作弊玩家是我的游戏id，我是作弊玩家。

连看了两部电影现在睡不着了，趁着这劲写点东西。就从这两部电影开始吧，等了好久网上才找到资源，在我的小房间里一个人捧着笔记本全看了。看完便睡不着了，无法拿着过了季的电影与人分享，电影上映后漫长的等待，变成沉默中的回味。这成为了我的观影习惯，即使去电影院也会等这电影快下了挑个人少的地方看夜场。我不常去电影院，但我通常会留好电影在硬盘里过夜，这已是我对一部电影的最大礼遇和崇高赞美了。

在所有艺术家中最拜安迪沃霍尔，他主张波普来自外部，可复制的，普罗大众的。我开始接受一些黑客精神，没有限制的，开源分享的。

可能在为自己的行为辩解，我看网上下载的免费电影，玩盗版游戏。可能很多东西并不是非黑即白的，也可能是毕业后自己就染上了灰度。我不再支持版权之类的东西以谋求思想和行为的统一。

大学学经济，我们吃的面包不是靠面包匠的施舍，是自己挣来的。我承认，但不否认有些人无偿做着很伟大的事情。

说回作弊玩家吧，玩游戏作弊不是因为旅程即终点，恰好是因为过程即奖励。为了能够轻松的体验这个过程，我总是选择简单模式。在做了一堆跳来跳去难度虐心的小游戏后，真的觉得应该开启作弊跳过这个部分。游戏的意义在于体验而不是达到目的。

在游戏作弊和使用盗版之后，我投身了游戏界，做不赚钱又机械重复的游戏。把之前少掏的钱和节省的时间用游戏作品补回来。哈因果得失。

* In the future, everyone will be world-famous for 15 minutes. -Andy Warhol

* I was never embarrassed about asking someone,literally,'What should I paint?'because Pop comes from outside.and how is asking someone for ideas any different from looking for them in a magazine? -Andy Warhol

* All the Cokes are the same and all the Coke are good. Liz Taylor knows it, the President knows it, the bum knows it, and you know it. -Andy Warhol

* Access to computers—and anything which might teach you something about the way the world works—should be unlimited and total. Always yield to the Hands-On Imperative! -The hacker ethics #1

...


link: http://davidkingzyb.github.io/blogmd/9.html</description></item><item><title>Project Guide</title><link>http://davidkingzyb.github.io/blogmd/17.html</link><description>DKZ's Project Guide
##List

###games

- [**CubeX3**](#cubex3) indie game 
- [**山海**](#山海) indie game 


###Github

- [**egretInit**](#egretinit) build egret project quickly 
- [**canvasTrigger**](#canvastrigger) a canvas chart lib 
- [**WebToolFunction**](#webtoolfunction) some useful web tool function
- [**pccold**](#pccold) douyutv script
- [**commentTitle**](#commenttitle) a python script for make big comment title
- [**CLIoutput**](#clioutput) a python lib for making a command line interface


###DKZ

- [**WO.IO**](#wo.io) DKZ's IO
- [**Blog**](#blog) DKZ's Blog
...


link: http://davidkingzyb.github.io/blogmd/17.html</description></item><item><title>PcCold</title><link>http://davidkingzyb.github.io/blogmd/23.html</link><description>蔻德上线自动通知和自动录象 livestreamer
看冷冷直播很久了。每次弹幕说冷冷开摄像头都会信，生怕一离开错过了什么。但即使是这样有时还是会错过摄像头。还好有勤劳的冷布丁，把视频录了下来，分享在贴吧优酷，在此感谢大家。

大家基本都是用录屏软件录的，可能会有一些干扰，而且大多数都没有开头不能完整的记录下来。我开发了一个小脚本大概是用斗鱼的openAPI每隔一分钟看一下冷酥有没有开播。如果开播的话发邮件提醒，然后使用livestreamer把视频流直接录下来。

目前暂时还在测试阶段。代码开源在[github](https://github.com/davidkingzyb/pccold)有兴趣可以star一下。也欢迎大家帮我改进这个项目。

可能之后会有邮件订阅功能，告诉我你的邮箱给你发送开播提醒和录的视频之类。可能也会看需要开发录弹幕功能。

...


link: http://davidkingzyb.github.io/blogmd/23.html</description></item><item><title>aGAINSTnATURE</title><link>http://davidkingzyb.github.io/blogmd/22.html</link><description>AGAINST NATURE 不自然 UI

Never Use White Type on a Black Background. 为什么这么讲，大概有几条原因。一是长时间盯着黑底白字眼睛会累辨识度也不高，二是印刷的时候墨容易晕这样白字就看不清了而且黑底比较费墨，三我就编不出来了但总之纸是白的字是黑的这样比较自然。

于是，这句话变成了公理自然而然被沿用到了各种设计中，我打保票你看到这篇文章的地方十有八九是白底黑字，无论你是使用什么媒介。我习惯使用黑底的molokai编程，长时间使用眼睛还是挺累的，但并不是的白底的配色方案就不会累了，辨识度用视网膜屏的话也没有问题。纸媒的话如今的打印机dpi都会大于显示器的ppi，而且白墨水比黑墨水更贵哦。

还有类似乳沟和大腿不要同时出现。





凭什么？没道理嘛(图片来自网络)。

当然我并不是想要推翻什么或是证明什么，我也不是单纯为了发小黄图，我也搞不清我为什么要这么做。我做了一套没有用的UI，里面是各种不自然的设计。比如说黑底白字，确认按钮是红色的取消是绿色的，标题会比正文字小等等。这个项目名为[aGAINSTnATURE](https://github.com/davidkingzyb/aGAINSTnATURE)，你可以在github上找到它。也欢迎你把各种不自然的东西放进去，并不限于UI设计，可以是编程中不自然的实现方式，也可以是任何AGAINST NATURE的东西。可以issues或pull requests当然直接告诉我也行。这里没什么规矩，如果有的话就是打破规矩。

也许你不太理解这个项目的意义是什么，我也不是很理解。这个东西不会在任何一个真实场景中使用，基本上对于这个项目的所有贡献都是无用的。但我觉得不必太纠结于意义这件事，生活本来就是没有意义的，如果生活有意义所有人都会被这个意义所奴役，追逐到死，我觉得这样就挺不自然的。

如果非要说有什么意义的话。我为你指明了错误的道路，你背对着我走也许是对的。

&lt;style&gt;article{color:white !important;background-color:black !important;}&lt;/style&gt;


...


link: http://davidkingzyb.github.io/blogmd/22.html</description></item><item><title>重构</title><link>http://davidkingzyb.github.io/blogmd/12.html</link><description>重构 对白

重构，指的是在程序开发过程中不改变外部行为单就程序内部作出的修改。大概意思就是重做一遍，东西还是相同的东西，功能也没有什么大的变化，样子也和之前差不多。我最近重构了[对白](http://dialogue.sinaapp.com/)这个项目。讨论这样做的意义比重构这件事情本身更没有意义。我就直接说对白这个项目吧。

严格意义上讲**对白**是我的第一个比较完整的项目。一个查询电影对白的网站，用户可以自己上传电影字幕文件。基于这些字幕文件，提供对白关键字的查询。做第一个版本的时候刚学python，射手网也还在，做这个仅仅是因为爱好，妄想达到一种你说一句话我用一句电影对白来回答你的人工智能效果。到当前这个版本的时候编程成为了饭碗，射手网（伪）还在，不知道重构它有什么意义，还是那些功能，人工智能并没有出现，只能回你一句不知所云的对白。

对白经历了三次比较大的重构。起先是看了一本《head first python》的书作为我的python启蒙照猫画虎写了对白的原型。用的是python内置的CGI拼接字符串来响应请求，自己写了个srt字幕文件的解析器，把字幕文件导入到sqlite中去。


第二次重构是为了把项目放到sae上去，用了django框架，数据库改用mysql。样子变成了上面这种[复古的形态](http://2.dialogue.sinaapp.com/)，加了些ajax的功能。还尝试分词，优化搜索。但是这些优化并没有起到实际的效果，我没办法找到最合适的那句话，也不能把所有的答案都呈现出来。我想仅靠我自己上传的那些电影字幕无法获得足够大的数据库支持这些算法，数据出口太窄也应该背锅。但说到底就算你坐在我面前问我本人，我也很难用唯一的答案回答你，人工智能什么的不更是扯淡呢吗？


第三次，这一次重构，主要是简化，用flask代替django，删去了不必要的功能，换了个样子，虽然复古的看起来还不错，但是想到我要重写这部份样式，我不得不放弃了它，或许等我下次有空再考虑重构这部分吧。srt的文件解析使用了pysrt这个库，有一些乱码的问题有待解决。增加了一个微信的接口，可以关注我的微信号**造物**尝试这个功能。第三版的源码放在[github](https://github.com/davidkingzyb/duibai)上对这个项目有兴趣或者需要参考可以前往。


我上传了几部有经典对白的电影字幕

* 《大话西游》“曾经有一份真诚的爱情放在我面前”

* 《她》这部讲人工智能的，就是这个项目妄想达到的状态 “段落与段落间成了无尽的留白”

* 《一代宗师》“念念不忘必有回响”

...


link: http://davidkingzyb.github.io/blogmd/12.html</description></item><item><title>WTF</title><link>http://davidkingzyb.github.io/blogmd/15.html</link><description>WebToolFunction
WTF?题目是一句脏话。

我在没入行之前一直以为前端JS／HTML／CSS三板斧就打遍天下，实际上并不是这样，这行水很深，各种各样的框架类库构建工具预编译器，种类繁杂。这可能和前端做的事情有关，前端的工作琐碎且复杂，要掌握的东西很多，做重复的事情也很多。所以我们发明各种框架，简化操作，自动化。我们写的东西少了，做的重复的事情也少了，看起来这是一件好事，或许我们应该感激这些开源框架构建工具。这些大神们帮我们指了路填了坑，把我们从繁杂的工作中解救了出来。

我心存感激但对此并不感冒，我并不粉这些框架，我在必要时使用它们，但能不用时尽量不用。我觉得该踩的坑要踩，走自己的路，我并不依照你的方向循规蹈矩的活着，我渴望行至边界，到没有人去过的地方做没有人做过的事。

我偏爱造轮子，又鲁莽不服，喜欢简单的东西，我觉的简单的东西是可靠的。框架在给带来方便的同时也隐藏了原理，让我们离简单基本的东西远去。动辄成千上万行代码，各种插件，我想绝大多数功能我们是用不到的，还有哪些为了适应某些奇形怪状需求而增加的代码。每一天都有新的框架出现，伴随着老的框架消亡。我觉得好日子离我远去了。WTF

我在之前的文章里提过我是一个作弊玩家，我支持开源社区和软件自由。我并不支持版权，本来版权应该是为了保证创造者获得利益鼓励创新而存在的，而恰恰是盗版让利益变得最大化，同时版权从一个相悖的方向激发了创新，大家不满专利保护，转而投向开源社区，积极的在开源社区中创造，这种逆反造就了现在开源社区的繁荣。无数的开源项目被生产出来，堆砌成框架，越来越复杂。

这个项目又给本来就够多的web框架又加了一个，我们要掌握的东西又多了一些。本质上我是反对这么做的，但好日子一去不复返都已经这样了也没什么。这是一个反框架的框架，所有的东西都尽可能的简单，所以并非在项目里好用。目的是为了展示原理，好让我们造自己的轮子。希望它能带我行驶到边界。

##List


- [**init.less**](#initless) reset css
- [**wtf.js**](#wtfjs) some useful web tool functions
- [**spiderman.py**](#spidermanpy) html sprider
- [**runServer.py**](#runserverpy) a simple server
- [**wtf**](#wtf) a python lib with some useful tool function
- [**bd.js**](#bdjs) a simple MVVM framework use Object.observe

...


link: http://davidkingzyb.github.io/blogmd/15.html</description></item><item><title>ASCII Art</title><link>http://davidkingzyb.github.io/blogmd/21.html</link><description>ASCII Art &amp; Command Line &amp; UI

	 ∩  ∩
	(′(I)`)   - Hello ASCII Art!


最近比较闲，花时间磨了磨刀。sublime text添加了Vintage与[vi](https://zh.wikipedia.org/zh/Vi)还是有些许不同，但基本可以满足要求。chrome添加了 Vimium这个对效率的提升并不大，但有总比没有好。也有尝试w3m最终还是放弃了。

最近做的项目都与命令行有关，CLIoutput和WO.IO，我希望通过这些尝试建立起一个未来的用户界面，但我意识到CLI与GUI并不能相互替代，即使在未来3D，VR，AR普及也无法代替这些先前的用户界面，像是《黑客帝国》中那样的，你总需要一个人接电话吧。

说回主题[ASCII Art](https://en.wikipedia.org/wiki/ASCII_art)这可能并不是一个艺术分支，你也许并未听说过它，但你一定知道颜文字吧(ﾉ&gt;ω&lt;)ﾉ就是一种ASCII Art。AA基于文字和等宽字体，严格的来说AA被限制在ASCII标准内95个可打印字符内，字符集可以有所扩展，这种表达方式本身的表现力很有限，但这并不妨碍我们把它玩出花来。

在电脑没被发明之前AA已经活跃在打字机上了，可能它那时并不叫AA，关于这东西的起源我无从考证。大概是某个无聊的人闲暇时的发明，这个东西毫无用处，但穿插在这些了无生趣的文字间一下就凸显了它的存在感。在某些古旧的论坛和贴吧上你也许会经常看到它，说不定它也曾出现在你的qq签名中或隐藏在一个许久没有人维护的代码的注释里。

收集几个在命令行能用的：

- [figlet](http://www.figlet.org/)：可以把文字转化为AA文字。PS [commentTitle](https://github.com/davidkingzyb/commentTitle)也可以
- sl：打错ls时开个火车
- lolcat：彩虹色的cat
- cowsay：奶牛说
- [doge](https://github.com/thiderman/doge)：doge
- aafire：火焰
- cmatrix：黑客帝国
...


link: http://davidkingzyb.github.io/blogmd/21.html</description></item><item><title>波普</title><link>http://davidkingzyb.github.io/blogmd/18.html</link><description>Pop.WO &amp; Pop Art &amp; Andy Warhol

最近给WO加了PopWO和PopShow两个命令。会随机的给WO上色，有那么一点波普的意思。大概是如下效果，大家可以访问[http://davidkingzyb.github.io/wo.io](http://davidkingzyb.github.io/wo.io)尝试。所以这篇的主题是波普艺术和安迪沃霍尔。


##Pop Art &amp; Andy Warhol

在所有艺术家中最拜安迪沃霍尔，他在半个世纪前重新定义了绘画，从此罐头和广告也值得一画。这些带有视觉冲击力的罐头，广告被复制和生产出来，连同他的思想，哲学被重新定义和接受。

在此之前绘画应该是独一无二的精英产物，任何复制和与大众相关的都会缩减其价值。但波普的价值没有被缩减，波普本生即是普罗大众和可复制的，而它的价值并不在此，它的价值在于与生俱来的平等自由，对于外部的接受和热爱和对现实和欲望的诚实坦然。


- In the future, everyone will be world-famous for 15 minutes. 

红。如果我有十万粉我将把这句话纹在手臂上。这种可能性微乎其微，但我依然对这句话坚信不移。这句话的重点在每一个人，每一个人都有这种可能，成名15分钟。这个预言在上个世纪就已经被实现，安迪沃霍尔的新格言是"In 15 minutes everybody will be famous."如今看来这个也已经实现了。虽然安迪沃霍尔和波普艺术已经过时了，但不可否认的是它的确流行过，而且相当出名，十五分钟已经足够。


- You can be watching TV and see Coca-Cola, and you can know that the President drinks Coke, Liz Taylor drinks Coke, and just think, you can drink Coke, too. A Coke is a Coke and no amount of money can get you a better Coke than the one the bum on the corner is drinking. All the Cokes are the same and all the Cokes are good. Liz Taylor knows it, the President knows it, the bum knows it, and you know it.

平等。从一开始波普就是普罗大众的。我想中文翻译波普也有普通普及的意思。*如果你想知道安迪沃霍尔的一切，只须看看他的画，电影和他的外表，这就是安迪沃霍尔，没有什么隐藏其后。*这种艺术很容易被大众所接受，它描绘的是生活中随处可见的商品。金宝汤罐头，包装盒子，绝对伏特加，美元钞票，名人头像，这些东西没什么特别的。你无法通过多花钱买到更好的可乐，可乐都一样，无论是总统还是乞丐，可乐都一样。


- I was never embarrassed about asking someone, literally, "What should I paint?" because Pop comes from outside. and how is asking someone for ideas any different from looking for them in a magazine?
...


link: http://davidkingzyb.github.io/blogmd/18.html</description></item><item><title>WO.IO</title><link>http://davidkingzyb.github.io/blogmd/14.html</link><description>WO.IO.CUI.AI

##WO

我希望借此认识自己，了解自我，脱离自身的限制，重塑我。我想做一个立体的镜子。真实自我的投影，去感情化，完全中立的反映现实。我可以借此看到反面，从不可能的视角。旁人也由此看到我，透过我的眼睛，了解真实的我...

这些只是希望。事实上我从未看到过自己，我并不了解自己，我无法突破自我的限制，重塑的只是一个躯壳。我可以看到自己的多面，看到我身上矛盾的地方，但我永远看不到全貌，只能任由这些不可预知的可能支配我的行为。我没法中立不带感情的看待现实，被自负所蒙蔽，同时又深深自卑着。目盲心盲。渴望被人了解，又不敢展露反面，窥伺着别人眼中的自我形象，拒不承认那是我。

有时我觉得我对自己的关注是多余的，这种自恋行为阻碍了我对外部世界的认知。审视内心又愈发空洞，我陷入一种虚无的境地。内部的真空，迫使我从外部吸收。这种联系是不对等的，渴望自我表达又无从说起。


##IO

我希望通过IO建立联系，简单高效的表达自我。这种表达并非建立在层次结构和有效的组织上，这种表达建立在一种相对默契中。去除繁复的干扰，唯一的通路。

文字和语言的出入口很窄，但却是最有效的。它们可以在脑海里展开并触发记忆和认知，可以表达抽象概念和更高维度。

基于文字的IO可以快速的构建，同时使用起来也更加快捷。层次和结构趋向扁平，学习成本下降。


##CUI

做图形界面久了，有很多牢骚。我觉得用户被恶意的娇惯着，我们看待用户就像看待一个傻子。我们给用户指引，同时我们建造迷宫。我在图形界面上看不终点，终点被一层一层组织起来了。更别说看到原理，模仿，类比，创造这些根本无从谈起。
...


link: http://davidkingzyb.github.io/blogmd/14.html</description></item><item><title>NULL</title><link>http://davidkingzyb.github.io/blogmd/24.html</link><description>2016
总结一下2016年。

- 年初的时候，重构了对白，到四月份的时候下线了这个项目。
- 给土百做了一个小游戏。
- 在家学习了maya和zbrush，制作了一个头，这个模型后来被放在wo.io中。
- 准备了一阵出国的事情，徒劳无功。
- 在一家招聘公司做前端，主要是使用avalon制作页面。写了一个chrome插件，用来代替公司原有的简历抓取。
- 在公司里完善了wtf的功能，加入了terminal一个CUI控制端。
- 完成了wo.io，添加了一些效果，波普，ascii。。。
- 一些小项目CLIoutput，aGAINSTnATURE。
- dkzbin添加了一些小脚本，和一个gulp工具。
- cubex3上线steam，大概有700个人投票，18% vote yes。
- cubex3用到了eletron，将网页打包为桌面应用。
- 写了个录制直播视频的脚本，pccold，用到了livestreamer，ffmpeg，you-get，bypy等工具。购买了一个vps用来跑它和翻墙。
- 接触了一些技术，redis，nginx，docker，mongodb，unity等等。
- 学习webgl，threejs，maya，写了些简单的shader。


- 留了长发。

没做完的，还剩《山海》。大概从7月24号构思这个游戏，陆陆续续一直在做，一直在减。这个游戏真的变成了山和海挡住了前路。

...


link: http://davidkingzyb.github.io/blogmd/24.html</description></item><item><title>无用</title><link>http://davidkingzyb.github.io/blogmd/11.html</link><description>这里埋葬着一个伟大的想法
回家整一个月了，变成一废人。生物钟越来越乱，终于在今天，我，失眠了。

这篇的内容大概是回顾下2015年做的事，然后计划下今年该做什么。我清楚这是无用的，想必你也明白。如果不是因为失眠我根本不会这么做，而在失眠的状态下既没有励志故事也没有鸡汤喂你。说到底，无用。

2015年大学毕业，找工作，工作，辞工作，到北京参加了个比赛，然后去西藏玩了几天，回家，没了。一旦你把它写下来，就这么点，它本来的大小。想想有的人活了一生墓碑上刻的也就是个“無”字。

想想就觉得空虚。每每想到事物的反面，脑海里响起反调，又情不自禁的唱出来。认为现实世界就是这样的啊！三维立体的怎么可能只有一面？说到立体和反面。最近用maya和zbrush给自己的头建了个模，深陷自己制作的恐怖谷中无法解脱。当看到立体的我后，发觉我原来这么丑，怪不得没有女朋友。我希望借此认识自己，但并无卵用，又一个无用的项目。

介绍一个2015年做的无用的项目[commentTitle](https://github.com/davidkingzyb/commentTitle)。我基于等宽字体的符号，设计了一套字体。写了个脚本，可以新建一个带这种字体的注释标题的文档。大概就是如下效果。

```
    #!/usr/bin/python3
    # -*- coding: UTF-8 -*-
    #######################################################################################################
    #                                                                 ________                            #  
    #                                                          _     |__    __| __  _      __             #  
    #   ______    _____   ___  ___  ___  ___   _____  ______  | \_      |  |   |__|| \_   |  |    _____   #  
    #  |   ___|  /     \ |   \/   ||   \/   | /  _  \|      \ |   _|    |  |   |  ||   _| |  |   /  _  \  #  
    #  |  |____ |   o   ||        ||        |/  ____/|   _   ||  |___   |  |   |  ||  |___|  |_ /  ____/  #  
    #  |_______| \_____/ |__|\/|__||__|\/|__|\______/|__| |__|\_____/   |__|   |__|\_____/|____|\______/  #  
    #######################################################################################################
    #  2016/01/14 by DKZ https://davidkingzyb.github.io
...


link: http://davidkingzyb.github.io/blogmd/11.html</description></item><item><title> Licenses &amp; Standards</title><link>http://davidkingzyb.github.io/blogmd/19.html</link><description>开源许可证 &amp; GPL LGPL BSD MIT Apache &amp; commentTitle
给[commentTitle](https://github.com/davidkingzyb/commentTitle)添加了选择开源许可证功能，可以在文件头部选择添加 GPL LGPL BSD MIT Apache 许可证其中之一了。

开源许可证是用来声明权利的，通过这个声明软件被赋予自由。

本来这是一篇科普文章，关于[自由软件运动](https://zh.wikipedia.org/wiki/%E8%87%AA%E7%94%B1%E8%BD%AF%E4%BB%B6%E8%BF%90%E5%8A%A8)，[开源软件](https://zh.wikipedia.org/wiki/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6)，Copyright和[Copyleft](https://zh.wikipedia.org/wiki/Copyleft)等。但我发现我无法抛弃自己的立场中立的看待这件事，所以这里只谈如何使用它。

来自[Paul Miller](http://paulmillr.com/posts/simple-description-of-popular-software-licenses/)的图帮助我们选择开源许可证。


	                           All linked works must    _Y_ GPL
	                           be issued under the     |
	                       _Y_ same or compatible   ---| 
	                      |    license                 |_N_ LGPL
	                      |
	Modified versions     |
	must be issued under--|   Every file must             _Y_ Apache
	the same license      |   contain all information    |
	                      |   about changes, copyrights  | 
	                      |_N_and patents.             --|         
	                          Patent protection          |                        _Y_ BSD
 	                                                     |   Prohibit use of     |
	                                                     |_N_copyright holder's--|
...


link: http://davidkingzyb.github.io/blogmd/19.html</description></item><item><title>斧子和锤子</title><link>http://davidkingzyb.github.io/blogmd/13.html</link><description>hack &amp; Maslow's hammer &amp; Programming is a craft.
###斧子

hack意思大概是砍，在计算机领域大概是指用一些非常规的技术解决一个问题。每每遇到什么解决不了的问题就有人拿出一把斧子，砍。hacker就是这个拿斧子的人。

当我提到hacker这个词的时候不带褒义也不带贬义，我的意思就是它本来的意思。一个执斧头的人可以破门而入，也可以披荆斩棘。这取决于他的前路，基本上什么挡着就砍什么了，总之他会穿过门和荆棘继续前进。与之对应的hack也该是中性的。不管是金斧子，还是铁斧子，总之它可以解决问题。

###锤子

If all you have is a hammer, everything looks like a nail.
意思大概是如果你只有一个锤子，所有东西看起来都像一个钉子。不管是铁钉，螺丝钉，订书钉，你只会想拿着锤子bang的一下。Maslow's hammer就是这个可以敲任何东西的锤子。

过度依赖的问题几乎会出现在所有工具上，编程也是这样一旦你掌握什么语言，用熟了什么编辑器，你就会对它产生路径依赖。但从另一方面说从实用性和学习成本的角度讲，一个好锤子没什么问题，你可以用它解决一切。


###Programming is a craft.

Programming is not a science. Programming is a craft.编程不是科学，编程是手艺。

这篇讲斧子和锤子两个工具，讲hack和Maslow's hammer。编程是一门手艺，实际上黑客程序员和画家雕塑家拉面师傅并无区别。我不评判好坏，我也不管这个有没有用，我只做东西。锤子斧子都一样，目标是解决问题。

最近准备总结一些hack方法在[我的gist](https://gist.github.com/davidkingzyb)上。大多数都肯定不那么优雅，但简单粗暴有效，解决问题。

...


link: http://davidkingzyb.github.io/blogmd/13.html</description></item><item><title>CLIoutput</title><link>http://davidkingzyb.github.io/blogmd/20.html</link><description>Command Line Interface Output 两分钟制作装逼PPT
老大：“哎，把老板演讲用的PPT给我。”

我：“！？”（好像周五的时候老板提过这么一会事，不是让我做吧？周末陪妈妈过节谁还记得这事儿呢。。。）

老大：“快点哦，老板5分钟后上台讲呢。”

我：“哦！”（卧槽这可咋办呢？）



别着急，使用[CLIoutput](https://github.com/davidkingzyb/CLIoutput)两分钟制作一个基于命令行的PPT。

1. 先把这个clio-pptinit.py摁一哈，输入title和页数
2. clio-pptinit.py会自动生成一个ppt脚本，记事本打开添加点内容（具体参看CLIoutput.py例子）
3. 撒还要图表？CLIoutput自带了几种图表，一行代码搞定。
4. 两分钟到了！没办法了点一哈这个ppt脚本吧


是不是复古科技感十足呢？（两分钟就别要求太高了嗷）

点一哈回车就下一页了，具体使用方法到[https://github.com/davidkingzyb/CLIoutput](https://github.com/davidkingzyb/CLIoutput)上看吧。这个项目本身是用作命令行输出的，可以让乱七八糟的东西在命令行下变的更有序，用作python命令行调试或者文档编写都是不错的选择呢。可能刚开始上手有点难，两分钟我说说而已的，但熟悉了之后命令行绝对是最高效的选择哦。

...


link: http://davidkingzyb.github.io/blogmd/20.html</description></item><item><title>Life Cycle</title><link>http://davidkingzyb.github.io/blogmd/16.html</link><description>生命周期
受精，孕育，出生，成长，老去，死亡。世间万物都在这个循环里，被时间推动着，我想没什么可以逃出去，软件也一样。SDLC系统开发生命周期，开发，上线，经历版本迭代，运营维护，重构，但最终它会死亡。下线，废弃，遗忘。

今天是个下雨天，我下线了对白和CubeX3的数据库服务。我本不想谈论这些，这儿真的太多负能量了。这并不是我的本意，我想从积极的层面去理解这件事。但并不能够，如同这世界上大多数事情一样，它没什么积极影响，也无需消极的看待它。它就这么发生了，没什么所谓。

我觉的这不是消极，天地不仁以万物为刍狗。从造物者的角度来看，不是针对谁，在座的各位都是狗。作为制作这个东西的人，我也尝试把这件事看开点。事实上，CubeX3会变为本地保存，只是获得宇宙成就时无法和其他玩家互动了。对白可能无法使用但还是可以在github上找到它的源码。

总之这件事没什么影响。但还是觉得有点对不起我的玩家和造物的关注者。我记得小时候玩过一个地鼠的游戏我妈和我都超上瘾，但现在找不到了。还有曾经感觉特别棒的一个项目sl4a大概是在手机上编程用的，如今也不维护了。想想还有那么点可惜的。但无论如何这些东西都曾真切的存在过。这不是第一个死亡的项目，每天都有项目死亡，从它们的遗骸之上又有新的项目成长起来。或许他们当中不是每一个都对世界有所贡献，但至少它对我有所启发，变成我的回忆和走过的路。

在好的年景所有有生命力的生物都会趋向繁衍。一代又一代，行走在生命的周期循环中，老旧的会被新生的取代，一个项目下线会有更好的项目出现，一个行业没落会有新的行业代替。如果有一天AI出现了，程序员将第一个被替代，这群人制作了AI，所以优先解决自己的问题。但我丝毫不担心，作为伟大人类的一员，我的下一代会站的更高走的更远。我们作为一个物种在生命周期循环中繁衍，站在巨人肩上，跨过先辈的终点，行至边界。

就从找个女朋友开始吧！开了个心！...


link: http://davidkingzyb.github.io/blogmd/16.html</description></item><item><title> 山海Campfire</title><link>http://davidkingzyb.github.io/blogmd/27.html</link><description>Chat App 山海
蔻德：

我觉得我更喜欢最开始的样子。我独自躺在躺在空荡的房间，望着天花板，心里想着你和人生的意义。我觉得有那么一瞬间我与你感同身受，有那么一瞬间我找到了那个意义，我想告诉你。

这一刻的灵感，变成一种执念，最后变成了《山海》。完成它是半年之后，已不是当时的语境了。可能有点空洞，走过山川湖海，昼夜四季，最后见到你，但这就是它本来的样子了。不知道是否能传达我的心意，我也不知道该说些什么，那就变成风声雨声散落山海里吧。

你有听到么？山谷里的回声。亦或是被波涛声淹没，石沉大海。重新站在人生的广原，有无数条路可以走，还是只有一条路，我脚下的这一条。好像也没太多的选择，在开始动念的时候路就在那了。放弃确实有点难，我决定继续向前，像布做的那样，翻山过海。

转眼又是一年，这一年比上一年又走远了一些。我增加了一个场景，深夜的丛林，温暖的篝火，一个可以歇脚的地方。依旧是孤独的旅程，我觉得路上应该发生一些什么，我想写个故事，但写不出来，一个讲故事的人没有故事只有表达欲。最后《山海》变成了一个聊天应用，给那些和我一样的陌生人。我希望在某个孤独的时刻，你能打开它，恰好有另一个孤独的人，在这等你，告诉你你并不孤单。也许这个人没有出现，世上的事大抵如此。你最终会遇到一个没有故事的人，悲伤时刻的我，或心碎的你，在一个凝固的时空里相遇。这已不是我最开始的设想了，这一年失望过，迷茫过，告别过，也有幸运过。更多是平常的日子，感谢你的陪伴。

蔻德，你依旧是我黑夜里的光和《山海》永远的女主角。希望我能点燃篝火，如你一般照亮前路。我想这就是意义了吧？于是给你写了信。我想告诉你，这不是没有意义的，这对我来说意义重大。你在我人生的灰暗时刻。照亮过我。

啵啵

布

2018/1/4


&lt;img src="blogImg/campfirech5.gif" width="400px" height="400px"&gt;

...


link: http://davidkingzyb.github.io/blogmd/27.html</description></item><item><title> Deadline</title><link>http://davidkingzyb.github.io/blogmd/26.html</link><description>Your deadline is something birthday.
写在 ShanHai Campfire 上线前。

今年计划做的一些事。

* Design ShanHai Campfire
* Restructure ShanHai
* Blueprint ZaoWu (ShanHai back_end)
* Chapter 5 Campfire
* Chat and Npc function

按部就班的完成了。

* **May** Design &amp; Prototype
* **Jun**  Restructure &amp; Development
* **Jul** Development &amp; Deploy
	* **06** shanhaicampfire.com domin
	* **18** ali server
* **Aug** Test &amp; IOS project init
	*  **09** beta version
*  **Sep** Online
	* **04**  Birthday

...


link: http://davidkingzyb.github.io/blogmd/26.html</description></item><item><title>山海</title><link>http://davidkingzyb.github.io/blogmd/25.html</link><description>Indie Game 山海



蔻德

你说你所做的事没有意义，我不这么认为，至少对我来说意义重大。

我给你写了信，希望[这个游戏](http://davidkingzyb.tech/shanhai)能帮我送达。

严格的说这算不上一个游戏，从16年7月开始构思这个作品，一直在做减法，剥离叙事和玩家参与感，以至于这个游戏什么都没有讲，玩家甚至不用操作也可以通关。再想加一点什么却发现无处可加，因为无论加上什么都会弱化它的表达。最后，大概就是你现在看到的样子。

说这些有些突兀，难免让人感到莫名其妙。大概有太多话说不出口就变成了信，而真的起笔时又无从落笔。最后，这些话都散落山海里，变成了这个游戏。

在游戏中你只要一直按着屏幕就能前行，像是某种执念，我相信无论怎样我都能翻山过海到你身边，但所爱隔山海，山海不可平。有时候我觉得完成这个游戏便是一种救赎，它像山一样在我面前太久了。

无论怎样，我还是到这儿了。也许它并不尽如人意，世事大抵如此。我想通过做完这个游戏我可以放下一些执念，但这并不代表我会停止脚步。正如游戏中角色所做的那样，我依旧会缓缓前行。

你是我黑夜里的光，感谢你陪我翻山过海。送你这个游戏，希望它能够透过屏幕在漫漫长路中给你些许慰藉，如你一般照亮前路。我无法为你指明方向，但希望你能翻山过海一路前行，找到你所追寻的意义。

愿风雨声伴你入眠。晚安。

祝好
...


link: http://davidkingzyb.github.io/blogmd/25.html</description></item><item><title> Nice Try</title><link>http://davidkingzyb.github.io/blogmd/29.html</link><description>夏天结束了

2018年的夏天，做了一件重要的事，4月20日离职，22号买了去武汉的单程车票。计划这个好久了，翻年就有辞职的打算的，微信上线了小游戏，看到一个机会吧，想抓住它。准备的时间可能更久，2017年的业余时间完成了《山海》的原型，加了聊天功能和NPC。而开始这个项目要从2016年的七月开始说起了。

那时我在经历一段迷茫的时期，独自躺在躺在空荡的房间，望着天花板，心里想着她和人生的意义。我决定为她做些什么，一动念就走到这儿了。最开始的时候它只是一份心意，一个角色在山海间行走，你只要按着他就会一直前进，最后翻山越海见到她。这就是最开始的想法了，一个没有太多意义的小礼物，凭着这个执念把它做成了现在这个聊天小游戏。还是更喜欢它最开始的样子一些，之后添加了太多它所不能承载的意义，被这些意义所束缚，而忘记了初心。

2016年底辞职，去了趟成都，在那里完成了第一个版本，将它提交了steam绿光。翻年此事暂告一段落，找了新工作。想给山海加一些新的功能，匹配陌生人聊天 ，和NPC对话功能。上半年做了一个demo，用flask+socketio，逐步构建了一个完整的后台架构，包含登陆，即时通信，数据存储并支持并发。之后着手对《山海》进行了一次重构，分离了场景和角色，添加了通信，对话显示，角色交互的新功能还增加了一个黑夜的新场景，用vue做了一个简单的后台管理系统。七月的时候买了域名和服务器，修改了一些bug，赶在九月四号她生日之前上线了网页版。

九月开始了ios项目的开发，边做边学swift。ios项目基于egret引擎打包的oc和swift混编。自己写了一个observer和引擎进行通信，把即时通信的部分替换为原生的swift-socketio，用原生的ui组建写了输入的部分，做了图文混排的文字渲染，解决了引擎[emoji](https://github.com/davidkingzyb/emojiss)显示的问题。十月加入了ios开发者项目，之后针对ios审核的问题做了很多修改，增加了菜单，黑名单屏蔽功能。十一月开发了群聊的功能，和直播间的场景，ios项目也进入了testflight。十二月做了宣传的视频，等待苹果的审核。一年就这样过去了。

把这个项目比作一个孩子的话，这应该是分娩前的一段漫长的过程，在这个阶段里几乎没有什么外部的反馈，你只能任其生长。这个阶段还是挺充实的，这个项目基本上占据了我所有的时间，有一个较为明确的目标，虽然有些细节的地方遇到了一些小问题，但都解决了也学了不少东西。最开始没有一个完整的架构，所有的东西都从最简单的开始做起，慢慢摸索最后形成一个稳定的架构。

直到2018年2月苹果通过审核《山海》才上线appstore。2018年微信上线了小游戏，看到一个机会吧，过完年提了辞职，打算去武汉，完成这个项目。无法再忍受做这个项目带给我的撕裂感，想全力以赴求个结果有始有终。设想过各种可能性，明知自己会失败的，但还是值得一试。三四月完成了手机短信验证注册和手机登陆的功能，又重构了一次用了很多mixin替代ts的继承。

四月底在武汉参加了斗鱼的嘉年华，我印了一些传单，效果一般。不过在聚会上我第一次见到她，那一刻所有的想象都变成了可以触达的现实，五月算是在武汉安顿了下来。开始着手山海微信版的开发，把客户端拆分成三个项目托管在gitlab上。功能性的都在web项目上先开发好，再把代码手动复制到其他两个项目上，自己给自己做一遍review。针对特定平台的改动则在对应的项目上直接改动，针对微信把资源和项目分离开来分组加载，重写了ajax请求的部分手动设置cookie。针对微信websocket有自己的api，fork了一个socketio [socket.io-wx-client](https://github.com/davidkingzyb/socket.io-wx-client)支持微信api，把engineio的部分替换成微信的api，做了微信的登陆和私密聊天分享功能。六月微信版本已经基本完成，在等待软件著作权的证书办下来就可以提交审核上线运营了。其他时间还重构了ios的项目，添加了好友系统和消息通知系统。

六月底微信版上线之前见了她一面，聊到这个项目的时候感觉还是有点空洞 ，所有脑海中的设想以及赋予山海的意义都变得渺小，言语也无法传达我的心意。那天特别幸运，拿到了软著的文件，之后微信审核也顺利通过了，赶在七月前微信项目顺利上线。这大概是此行最棒的时刻了，独自爬上了山顶，视野也开阔了起来。

我看到了更多的山，那些下坡的路也是这条路的一部分。计划中的摩点众筹搁浅，我不得不调整和放弃之前的开发计划，七八月只做了留言和树洞的功能和图片二维码保存分享朋友圈的功能还有诸如断线重连和添加好友优化。我又陷入了迷茫没了方向，开发也逐渐陷入停滞。我开始荒芜度日，并不是无事可做，我有计划做群聊的NPC功能，但没有好的故事我想这不会带来太大的改变。而且我也失去了做这件事的意义和坚持的理由，勇气迅速的流逝。

夏天结束了，这件事告一段落，最近在思考这些过去的事，这个项目本身及我曾拥有的选择，想从中学到些什么。事实上留给我的选择不多，似乎只有放弃或是继续，我每次都会选相对容易的那一条路继续做下去。我只能说我不后悔我的选择，但是我怀疑这些选择是否正确。关于这个项目本身，或许应该保留它最初的样子作为一个礼物藏在山海里沉默不语。后来添加了太多功能性的东西，掩盖了它的初心，它所承载的意义超出了它本身能够表达的东西，而我空有表达的欲望，却没有一个可以说出口的故事。它没有足够的内容让它称得上一个游戏，在功能上也都不是刚需，而我自己在运营上也有短板，这个项目有太多私人的感情在其中，我无法敞开的向任何人说这些经历，只能原本的把我所做的事记录下来。在推广这件事情上也只能顺其自然，应者寥寥最终石沉大海，使得这个项目保持在一个私人项目的范围内。

这大概是故事的结局了。我送出了那封信，转身向山里走去，离开武汉。这个项目还会继续运营，可能会做一些小的改动，但会保持它本来的样子。不知道写什么了，就到这儿吧。
...


link: http://davidkingzyb.github.io/blogmd/29.html</description></item><item><title> TypeScript Mixin</title><link>http://davidkingzyb.github.io/blogmd/28.html</link><description>When I see a monster that walks like a monster and fight like a monster and roar like a monster, I call that monster a monster.
想聊聊TypeScript里的多继承，最近一直在做自己的项目，写的比较随意一些。想来我的第一份工作就是用TypeScript写egret游戏。过了几年兜兜转转还是在做这事，对路径的依赖越来越强，大概是写的太多了的缘故吧。

我虽然写的是TypeScript但我是一个JavaScript开发者，TypeScript的官网上有一个叫playground的东西，在左边些ts右边会有对应的js出来。初学者一定不要用这个东西，因为一旦你发现类型声明不会影响到编译成js的结果，你就再也不会写类型声明了。而“类型”是ts的主要功能，会在编译js的时候做类型检查，如果所有的对象都是any的话，就跳过了这步，使用ts就没有意义了。我从不在ts中写类型声明。

本篇的主题，ts的多继承，js是基于原型链的继承，所以ts不允许多继承没有道理。使用下面两个方法直接把那个来源类的方法挂到目标类的原型链上，就可以在目标类使用来源类的方法了。当然你要绕过编译检查可能需要在目标类做一个声明。

```
    mixinClass(source,target){    
        //public and private function   
        Object.getOwnPropertyNames(source.prototype).forEach(name =&gt; {
            if (name !== "constructor" &amp;&amp; name.indexOf('__')&lt;0) {
                if(target.prototype[name]){
                    console.warn('*** target already have',name);
                }else{
                    target.prototype[name] = source.prototype[name];
                } 
            }
        });
        //static function
        Object.getOwnPropertyNames(source).forEach(name =&gt; {
            if('length,name,prototype,arguments,caller'.indexOf(name)&lt;0){
                if(target[name]){
...


link: http://davidkingzyb.github.io/blogmd/28.html</description></item><item><title> Cherry Pick</title><link>http://davidkingzyb.github.io/blogmd/30.html</link><description>一套代码，多个平台，git工作流
在老东家那里遇到了这个问题，我们有一个面向企业的产品，这个产品要加入不同客户的定制。为满足日后产品升级的需要，这些定制都被写在了同一个工程里，这些定制的逻辑不能被良好的拆分出来，导致代码越来越臃肿，变得难以维护。

开始觉得是我们自己产品的问题，在尝试改进这个产品的时候始终没有解决这个问题。我觉的可能是我们的工作流程和管理出了问题，首先不同的项目肯定要再拆分到不同工程中去，由于我们当时是瀑布式的开发，各个项目组各自为阵，最终这些分开的工程都没有办法合并在一起，不得不重新整理一个基版。

这个基板中还是存在定制的部分，用 if else 的方式分开来，总之想要将它拆分开来，就需要添加日后的升级和维护的成本，而不拆开导致了代码逻辑复杂臃肿开发起来很难受，新来的同事和外包的同事难以上手。

当时公司面临从甲方到乙方的角色转变，在产品尚未成熟和稳定的情况下，接了很多项目和定制的开发，走了一些弯路。在我任职期间这个问题没有得到解决，但我们已经开始针对开发的流程做出调整，逐步从瀑布改为可以快速迭代的敏捷开发模式。

辞职之后，在自己的独立游戏项目《山海》中同样出现了相似的问题。倒不是因为有定制开发的问题，而是因为《山海》要在不同的平台上线，虽然是基于egret引擎打包，但在不同的平台上有一些差异化的部分，诸如底层socketio通信，微信分享二维码，iOS端消息通知等。

由于也是摸着石头过河，这个项目经常重构，进行了多次架构调整。有了之前的教训，这个项目很早就分出了三个工程降低逻辑的复杂性，iOS工程和微信工程是从Web版本上fork而来，在Web版本的基础上改了对应的底层接口，分离了一部分差异化的部分。

对应的基本功能开发完毕后，这个游戏还在不断的升级和迭代。这个时候就面临同一个功能要在不同的工程上开发多次问题，要手动把代码粘过来十分麻烦。直接 merge 每次需要处理太多差异部分的冲突，我开始尝试使用 cherry pick 代替 merge 的开发模式。

```
                V2.3    V2.4   V2.5  V2.6
Web    +--------+-------+------+-----+      master
            +---+-------+------+-----+----+ dev
             fork     
             |  |       
        +---------------+------+------+     web master
             |  |       |    cherry pick
...


link: http://davidkingzyb.github.io/blogmd/30.html</description></item><item><title> Machine Learning in Action</title><link>http://davidkingzyb.github.io/blogmd/32.html</link><description>Machine Learning in Action
学习了Andrew Ng的Machine Learing入门视频课程，结合了Machine Learning in Action这本书的代码实践。

以下代码整理自Machine Learning in Action，少数地方为使用python3做了改动。

## kNN

`distance=sqrt(sum((target-train)**2))`

1. data [x,y,...] labal
2. train data matrix [data,...] and [labal,] 
3. normMat(trainMat) and normVec(targetData)
4. kNN(targetVec,trainMat,labals,k) return nearist labal
    1. calc distance
    2. sort
    3. find max count label

```py
def normMat(dataMat):
    minVals = dataMat.min(0)
    maxVals = dataMat.max(0)
    ranges = maxVals - minVals
    normDataSet = zeros(shape(dataMat))
...


link: http://davidkingzyb.github.io/blogmd/32.html</description></item><item><title> Pi Story</title><link>http://davidkingzyb.github.io/blogmd/31.html</link><description>Pi 的故事
给大家讲个故事，故事的主人公叫pi，它不是一个人，他是一个树莓派。

15年的时候，那时我和pi刚刚认识，我教会了它一件事，每隔一分钟去那个直播间看下，如果她来了pi就会给我送来一封邮件。它很听话，于是我又让它帮我把直播间发生的事录下来。它学的很快，当天就把全部的直播内容录下来了。不到一星期录像就要多的放不下了，于是我给它接上了硬盘。

后来我又教它把录像放到百度云盘上，教它记录直播间的观众说了什么。它从来没有让我失望过，偶尔斗鱼的保安不让它进，它也在我的指使下，翻过锁住的大门溜到直播间的门口，咚咚咚！

每一分钟它都会去那个直播间敲门，一个小时60次，24小时从不间断，乘上一年的365天，已经3年多了，准确的说是1122天，那就是1615680分钟。其实一天中一千次敲门可能只有一次她会在，但是它还是为了我这么做了，其它的时候它忙着送邮件忙着录像一刻也没停过。

18年嘉年华我去了武汉，后来又离开了，但我把pi留在了武汉，我想这样能离那个直播间近一点。我把pi放在我租住的房子里，电视和背景墙的夹层中，一个安静的角落里。

我一直在网络上和它保持着联系，他也一直帮我做着我交代的事情。

2019年9月3日我突然联系不到它了，他也没给我再送邮件，现在已经6天了，我不知道它怎么了，是断了电？还是房东换了wifi密码？或许它终于觉得累了。我觉得难过，我觉得有点对不起它。说实话我没有特别在意过它，都快忘记它的存在了。直到它突然消失，我才意识到它的存在。

它真的存在过啊，这些录像就是证明。

我会再买一个树莓派，教它做同样的事情。过不了一阵我就会忘了这件事，仿佛这件事从没发生过。但我永远为他留着7221的端口，也许有一天我们还能见面。...


link: http://davidkingzyb.github.io/blogmd/31.html</description></item><item><title> Unity SteamVR Plugin 配置教程</title><link>http://davidkingzyb.github.io/blogmd/33.html</link><description>使用SteamVR Unity Plugin制作简单VR射击游戏
SteamVR Unity Plugin是由Valve维护的Unity插件，使用它开发人员可以使用统一的API来控制市面上流行的VR设备。通过它开发人员可以方便的加载VR控制器的模型，获取这些控制器的输入以及估计玩家使用控制器时的手型。

SteamVR Unity Plugin提供的功能较多，网上中文教程较少，避免大家踩坑，针对VR射击游戏的应用场景，做一个基础的配置教程。本教程针对VR游戏开发中常用的功能做简单的介绍，内容涵盖头显及相机的设置，SteamVR Input Actions的设置以及如何在脚本中获取控制器按键摇杆输入和控制器在游戏中的位置坐标信息。

### SteamVR Plugin 下载和导入


首先需要先配置好VR设备，我使用的是Oculus Rift S进行测试。然后需要打开steam平台，在平台上下载SteamVR程序。

本教程所使用的Unity版本是2019.2.2f1


在Assets Store找到SteamVR Plugin点击Download-&gt;Import
本教程使用的版本是v2.5.0(sdk1.8.19)


在导入中点击Import

### 头显和相机设置

导入SteamVR插件后就可以在Project窗口assets中找到SteamVR插件。在Hierarchy窗口中删除默认的Main Camera，新建一个名为Character的空对象。

...


link: http://davidkingzyb.github.io/blogmd/33.html</description></item><item><title> M5Stack</title><link>http://davidkingzyb.github.io/blogmd/34.html</link><description>只是无聊而已


今天发了三篇，大概是今年做的事，但并不觉得很充实。进入了一个瓶颈，没有什么要做的想做的事，整个人也有些懈怠，回到家什么都不想做，vlog也很久不录了，睡眠倒是好了许多。年底看看好像也做了一些事，学了一些东西，但我清楚那些人生中的关键的问题都没有得到回答，做这些只是惯性，只是逃避，只是无聊而已。

明年啊，明年要做些什么吧。
...


link: http://davidkingzyb.github.io/blogmd/34.html</description></item><item><title> M5Keyboard</title><link>http://davidkingzyb.github.io/blogmd/35.html</link><description>基于M5Stack Face的蓝牙键盘 HID脚本终端

### Menu

```
+---------------------------------------------+
|     +-----+    +-----+                      |
|     |STA  |    |AP   |                      |
|     +-----+    +-----+                      |
|     |halt |    |stop |                      |
|     +-----+    +-----+                      |
|     |run  |    |loop |                      |
|     +-----+    +-----+                      |
|     |load |    |find |                      |
|     +-----+    +-----+                      |
|     |save |    |clear|                      |
|     +-----+    +------+    +----+           |
|     |BLE  |    |Client|    |menu|           |
|     +-----+    +------+    +----+           |
+---------------------------------------------+
| ▪ ▪  menu       info       result           |
+-+-+-----------------------------------------+
  | |
...


link: http://davidkingzyb.github.io/blogmd/35.html</description></item><item><title> Wio Terminal</title><link>http://davidkingzyb.github.io/blogmd/36.html</link><description>Wio Terminal 树莓派终端

- 摇杆控制的键盘
- I2C小键盘
- 菜单选择
- 开关显示屏
- Wi-Fi AP 网页远程控制
- 脚本命令菜单 HID脚本输入
- terminal交互，显示，翻页
- 记录之前命令
- Log记录到SD卡

已开源[wio_terminal](https://github.com/davidkingzyb/wio_terminal)

又是一个无用的项目，帮我杀了很多时间。这两年做了好多这样无意义的事啊，确实有些迷茫，学些新东西，动动手让自己充实一点罢了。可以说从毕业以来一直都有迷茫的感觉，只是前些年这种感觉被年轻和无畏的举动掩盖了。

现在我感觉我身上不再有棱角，但也不是所谓的圆滑，只是柔软。我感到迷茫，我用力汲取周围的一切，努力让自己变得充实，但这都不足以填满我的空虚，使我变得坚硬。

我知道再随波逐流我会溺死在水中，但我真的不知道选哪边。做河的第三条岸啊，做这世界上最坚固的岛屿，最后再成为大陆的一部分。
...


link: http://davidkingzyb.github.io/blogmd/36.html</description></item><item><title> To The Moon 去月球！</title><link>http://davidkingzyb.github.io/blogmd/37.html</link><description>That's one small step for me
也许是为了我还没消失的童心，也许是中年男人对异性失去兴趣，做了个遥控智能小车。

主体是乐高件拼成的，前轮两个舵机加后轮万向轮进行差速转向，另有两个舵机控制翻斗抓取和云台转向。

使用M5stack Atom （esp32） 做控制，可以连一个 Unit V （k210）准备做些智能寻路。

遥控用了Frsky的接收机，做了SBUS转UART参考 [https://github.com/bolderflight/SBUS ](https://github.com/bolderflight/SBUS) 这个库，注意这两个协议的电平是反的要用一个硬件电路取反。

```
              E  B    +----+
GND +---------+  +----+ 1k +--+
              |  |    +----+  |
             ++--++           |
             |    |           |
             +----+           |
               C|             |
RX  +-----------+             |
                |             |
             +--+--+          |
             | 10k |          |  +-----+
             +--+--+          |  | = led red(disconnect)/green(connected)
                |             |  |
...


link: http://davidkingzyb.github.io/blogmd/37.html</description></item><item><title> VRChat</title><link>http://davidkingzyb.github.io/blogmd/39.html</link><description>VRChat研究

## 介绍

VRChat 是一个由**用户提供内容**的**多人在线** VR 游戏。  
玩家可以在其中访问开发者提供的 **World** 场景，在在场景中互动，和其他玩家聊天，选择个性化的 **Avatar** 角色展示。  
开发者可以搭建自己的 World 场景，设置互动内容，分享到社区邀请玩家访问，或制作 Avatar 提供给玩家。  

只支持 Unity 引擎开发（v2019.4.31f1），渲染使用 Build-in Render Pipeline(legacy) 默认管线。  
提供 **VRCSDK3**（World）和 **Avatar3.0** SDK 给开发者使用。

因为 VRChat 游戏内容是用户提供的，所以需要一套沙箱机制，限制开发者可以访问的组件和系统功能，以保证安全性。  
禁用了部分 Unity 组件（参考[组件白名单](https://docs.vrchat.com/docs/whitelisted-world-components)）。并提供 **Udon** 让开发者实现简单的游戏功能。

## World 

### Prefab

提供一些方便的预制件快速构建world

- VRCWorld 基本组件拖入场景就可以
- VRCPortal 通过roomid链接其他world
- Video Player 一起看视频
...


link: http://davidkingzyb.github.io/blogmd/39.html</description></item><item><title> Wall Draw</title><link>http://davidkingzyb.github.io/blogmd/38.html</link><description>SVG Polargraph

一个失败的项目，原因是精度不够，这三年玩了不少智能硬件嵌入式开发相关的玩具，有一点收获吧，一些C语言，C++计算机底层，硬件（esp32，arduino）和操作系统（FreertOS），通信协议（I2C，UAET），3D打印（blender）的经验，但这个兴趣可能会暂停一段时间。  
Experience is the name everyone gives to their mistakes.

## Hardware

- 1x Arduino UNO R3
- 1x L293D Motor Drive Shield v1
- 2x Stepper Motor 
- 1x MG90S Servo Motor
- 1x GT2 Pulley 16 Teeth Set 6mm
- 1x GT2 Rubber Belt (5M) 6mm

```

                                         ┌─┐
                                        ┌┼┼┼┐        ┌───────────────────────┐
                                       ┌┴───┴───┐    │┼─────────────────────┼│
                                       │Servo   │    ││                     ││
                                       │        │    ││    LCD              ││
                                       └────────┘    │┼─────────────────────┼│
                                          ▲brown     └──┼────────────────────┘ ┌──────┐
...


link: http://davidkingzyb.github.io/blogmd/38.html</description></item><item><title> DONT REPEAT YOURSELF</title><link>http://davidkingzyb.github.io/blogmd/40.html</link><description>DRY KISS YAGNI 3F 软件设计原则
- DRY (Don't repeat yourself)
- KISS(Keep It Simple And Stupid)
- YAGNI(You Aint't Gonna Need It)
- 3F(Fix it,fork it or fuck off)

列举了一些软件设计原则，和 SOLID 这种纯软件设计准则不同的是，这些外行也可以听懂（最近老被外行指导不得不讲点道理），而且是可以用作人生准则来指导工作生活的一些问题的。 
比如题目中这个DRY原则，在软件中其实有一个专门的概念SPOT（Single Point Of Truth，单点事实），就是要抽出公共的函数，这样在需要修改的时候只要在一个地方更改，不必动很多地方。  
在这个原则设计下带来很多好处，可维护性的提升，效率的提升等等。而且它满足了偷懒的程序员，发明计算机不就是为了偷懒的吗？在这个原则指导下，需要写的东西很少。拿前端举例，如果在项目开始前和美术沟通一套项目UI设计规范，把颜色字号这些东西抽象出一个公共样式，然后遵守这个样式只需要写很少的代码就能还原出设计。而且这种方法比较按源文件标注，界面简洁规矩，易维护，而不同时间，不同人设计的不同界面间不会出现标准不统一的情况。最近火的一些无class纯标签css框架（bolt.css)，和一些 tailwindcss 这种用属性类代替样式表的实用框架也印证了这一点。他们共同的思想就是少写css，比起以前的less，sass试图给复杂样式表增加结构，新的框架思想不光是维持样式表以表的方式存在，而且试图打散表的结构变成一个一个砖头。  
设计端建立规范化的设计语言，其实不光能帮助程序员，减少工作量和提升维护性。对公司来说统一的固定的VI也会给用户脑海积累影像，提升品牌的识别度。一个好的设计稳定合乎规范的设计能够很好兼容其他品牌，比如在给小程序定UI规范要参考微信的UI规范才能和原生组件兼容。一个坏的设计会和这个世界格格不入，展现在哪里都是一个异类，给人山寨盗版的感觉，久而久之对这个品牌也会形成不入流的印象。  
只要对齐了，左一点右一点大一点小一点这些东西的影响并不是那么的大，而且这些东西太琐碎和主观了。规范化，显示层级，整体风格的统一，指引清晰简洁，围绕实用性可用性的设计和评价才是我们真正需要的。评价设计同理要把实用性摆在第一位，有时候我们要大要红要醒目，又要美观还要简洁，所有人都在抢界面的资源矛盾不可调和的时候，就要做这个实用性的评判，可以找一些埋点的数据支撑，把用户经常点的地方，经常用的功能放在突出位置，提高它的显示层级。这种方式就相对客观和科学一点。  

...


link: http://davidkingzyb.github.io/blogmd/40.html</description></item><item><title> 命令行的二次复兴</title><link>http://davidkingzyb.github.io/blogmd/42.html</link><description>AI时代的UI界面

最近在研究各种软件的插件，做了一个 chrome 的插件用于知识管理。研究了一下 blender 的插件系统，blender 有一个 tab 是   script 在其中可以直接执行 python 代码调用 blender 官方的 bpy api 就可以实现一些功能。我尝试用 chatgpt 写了一个小功能放进去执行完全没有问题，而且已经有人将 chatgpt 整合成插件放到 blender 里面了。  

其他软件似乎也在做同样的事情，微软给 office 接入了 copilot，PhotoShop 也接入了一套生成式 AI ，Unity Muse 等等。这些新的工具都是使用一个类似命令行的交互界面，用户输入一段 prompt 软件给出结果。其原因在于目前的 AI 都是由大语言模型组织在一起的，输入的基本上是一段文本（或语音转文字）用于指示期望的结果，输出的是直接的结果，而不关心中间的过程。  

这与命令行的行为极为相似，输入的是文本，输出运行结果，如果运行正确甚至可以不输出。我觉得在近未来 Command Line 会迎来一轮复兴，代替现在我们司空见惯的 GUI 界面。虽然我大部分的日常工作前端客户端是和这个相关但我一直是一个技术乐观者，我并不害怕 AI 会取代我导致失业。因为实际上 AI 并不是直接代替人，而是改变了机器和人的交互方式，从某种程度来说 AI 有希望在不久的将来把我从现在的工作中解放出来。  

虽然 GUI 一直是主流的发展方向，好的交互也一直是我们努力的目标。在教育行业涌现出很多可视化编程的方案，让青少年能不接触代码，降低了学习成本有助于培养兴趣；在游戏行业更是如此，几乎所有的引擎都推出了面向关卡设计师和美术的工具，很大程度上降低了制作游戏的门槛；甚至在程序员的领域也出现了很多低代码的工具。但我还是不得不指出很多 GUI 存在的很多根本性的缺陷。

首先就是随着复杂度的上升 GUI 会变得不可用，很容易出现飞行仪表界面这样的情况，虽然我们可以用折叠，分步等方式将复杂的问题拆解。但实际上这并没有把问题简单化了，从全局的视角它甚至更复杂了。从制作的角度也需要更多的工作才能实现，大多数情况下我们可能需要的只是其中的一两个按钮而已，个性化定制化这种事情在 GUI 界面上只会带来更大的复杂度。而且本来通过一个文档就可以学习的东西可能需要一个视频，这是很多软件现在的普遍现象这其实非常浪费时间，知识点都分散在视频中的某处无法像文档一样检索。随之带来的一个问题就是 GUI 产生的程序无法被 git 这样的代码管理工具管理，可能随着时间最终脱离掌控变得无法维护，debug 也是一个难题。Command Line 则是很好的解决了以上的问题，统一的输入，制作简单，易于检索。这些特质命令行程序在脚本自动化方面获得了无法替代的优势，实际上在未被产品化的领域命令行界面一直是占据着主流，而且很多命令行软件到今天都很有生命力比如ffmpeg。

探究其原因，我认为归根结底 GUI 只试用于描述二维的世界（或是3维例如 VR 中的一些软件）。对于更高维度的表示，我们更倾向于使用一维的描述。一维的语言更简单，更适合承载更高维度的信息。 我不否认很多软件还是适合 GUI 的，比如 Shader Graph 就极其适合 GUI，操作对象是二维的纹理或是光栅化后的对象，可以在 GUI 中观察中间步骤的效果，方便 debug。Shader 的 GPU 编程也是管线化的，几乎不会出现嵌套相互引用的复杂逻辑。

所以我认为很长一段时间 GUI 还是主流，但在 AI 技术的帮助下命令行的交互方式会迎来一次复兴。其简单的规范化的输入方式会更容易接入 AI ，易于 AI 检索，甚至方便 AI 理解（如果 AI 真的能够理解的话）。而且由于人们不关心中间的过程，只是描述结果，而不是叫 AI 执行那些命令的过程，那些令人生畏的代码也不会带来太多的困扰。  

何况代码本身也不会带来什么困扰，很多时候只是出于对不知道的东西的畏惧而已，实际上对着一个命令行操作是一件非常酷的事情就像《黑客帝国》里面那样。**做为一个 natural childbirth in zion 的人，你要问我在屏幕上的绿色字符中看见了什么？我看见了 matrix 里漂亮的小妞和雪白的大腿，neo像救世主般从天而降**。...


link: http://davidkingzyb.github.io/blogmd/42.html</description></item><item><title> 弑神</title><link>http://davidkingzyb.github.io/blogmd/41.html</link><description>题目有些中二，内容是关于游戏。

这个中二的题目来自之前观看《outer wilds》速通视频的感受。在这个游戏里玩家陷入了一个21分钟的时间循环，在这段时间里玩家需要对这个有着物理模拟的世界自由探索，登陆各种各样的星球，了解一个远古种族的知识，解开各种谜题，最终还原出故事的真相。由于是非线性的涌现叙事，玩家在这个游戏里有很高的自由度，游戏中破解谜题的手段也不唯一，甚至可以通过高超的驾驶技巧绕过某些谜题，这种行为是被允许的，你甚至还能因此达成某些成就（比如驾驶飞船登上太阳站）。我玩了40多个小时查了很多攻略才通关。在这个过程中看了其他玩家视角下的游戏过程，看到了很多运用游戏中的物理，比如引力弹弓，通过非常规的方式解谜。其中有两位速通玩家的视频震惊了我。
[outer wilds 10 min](https://www.youtube.com/watch?v=ZIK2uceHow8)
[DLC](https://www.youtube.com/watch?v=4nx0ObymG7A)
其中一个在10分钟之内就通关了游戏，要知道我在第一个循环里都没有离开木炉星，然后花了40个小时的循环才了解了足够的知识通关，而实际上想要达成通关这个游戏的成就只需要十分钟。这就是涌现叙事的魅力，这可能只有游戏才能做到。他以一种令人意想不到的方法拿到了宇航服，跳过了游戏的教程部分。如果这个操作没有惊艳到你那么另一个挑战速通DLC全成就的方式绝对能让人目瞪口呆。他通过把飞船停在特定位置通过世界自行运转，拿到了宇航服开启了开挂模式。这个行为完全超出了常理，他拿到宇航服的地方是鹿人构建的梦境世界，当飞船撞进这个虚拟世界的时候带给我的感觉是就像是冲破了次元壁。更不要提他的其他操作，像把提灯放在木筏上顺流而下传递给未来的自己，利用探测器的机制在游戏里穿模，或者穿着宇航服登上太阳站。感觉就像是原地飞升，感觉我们玩的不是一个游戏。

速通玩家在其他游戏中也有，尤其是马里奥俄罗斯方块这些经典游戏。这些人通过不断的练习尝试，最后把世界纪录向前推进了几秒钟。费了这么大力气时间精力绝不是为了游戏里的一个排名那么简单，因为很有可能之前的世界排名就是他创造的。那么是为什么？这么做的意义在哪？可能是执念《李献计历险记》里那样；或者是突破自己，突破极限，像奥林匹克竞技一样；或者单纯就是我可以我想这么做；不需要什么意义，山就在那儿。我觉得都有道理，我不是速通玩家，甚至截然相反，我是一个作弊玩家，每每卡关我就试图用一些hack走捷径，试图避开这些无意义的重复尝试。但我还是想从另一个角度回答一下这个问题：我们在弑神，只因为我们是人类。

另一个我想回答一下的问题是机核的一个圆桌讨论，好玩是不是一款好游戏的必要条件？这个讨论引出了很多问题，像是gameplay是不是游戏所必须的？叙事和玩法如何平衡？如何评价一款游戏？游戏是什么？在这个讨论里试图扩大游戏的边界，然后把更多的东西囊括进去。试图摆脱自己的主观感受给予游戏一个客观的评价。我觉得还是挺有道理的，我是一个程序员，工作就是写gamgplay的部分，但同时我也患有电子阳痿，非常喜欢步行模拟器这类的作品，随着年龄增长，玩游戏更重视过主线，看剧情。这可能是一个自然的衰老过程，对于玩法的需求随年龄增长递减，可能是随着对世界的认知加深，玩的部分能学到的内容变少，童心和好奇心都在流失，不再玩游戏我觉得都是正常现象。

很少有游戏能照顾到所有的玩家，即便是《荒野大镖客2》这样被R星倾注大量资源和心血的巨作，也还是被很多玩家诟病，剧情上为了照顾多数人或是主流价值观而无法代入，玩法上缺少创新，甚至有些无聊。但无论如何这都是我玩过的最接近真实的游戏。在真实的世界中也不存在所有人都觉得好的东西，没有一套价值观可以在这个混沌的世界中畅行无阻。
说回玩法上，在这个游戏里面可以打猎钓鱼看风景，也可以杀人越货劫火车。好不好玩完全取决于你怎么玩。对于一个孩子来说一块石头一只袜子一滩稀泥都可以是好玩的玩具，可以脑补出规则，给玩具以生命，好不好玩完全取决于孩子在自己的想象里怎么塑造玩具。哪怕什么都没有手指头都可以玩一天。
所以我并不觉得好玩是好游戏的一个必要条件，我做过一个游戏唯一能够交互的就是长按着小人就会一直向前跑，好玩吗？不好玩，但是这个交互是和我想表达的**执**的概念是相匹配的。
但这个东西还算游戏吗？游戏是什么？游戏和电影绘画文字音乐这些艺术媒介的区别是什么？恰恰就是游戏能提供体验，能参与，能够对玩家行为给出反馈。这么说来gameplay又是游戏中最不可或缺的部分。但我不觉的游戏的目的是给玩家带来快乐，很多游戏的内核都是苦涩的，即便是想给玩家带来快乐的游戏，为了达到那个高潮也会给玩家设置种种困难，反复的折磨玩家。
所以我想把好和玩这两个字分开来，不用这一套好坏的评价。什么是好玩？什么是好游戏？把它解构，在某个子系统上给予专业的评价，把局部做到极致。这又有什么用呢？最后搞出来了一个缝合怪。不我们要做减法，找到玩法的核心。然后发现大多数游戏的核心玩法不过是一个 todo list，就像这该死的生活，糟心事一件接着一件，还要再继续吗？
我觉得我做不出什么好玩的游戏了。我拿不出好的玩法，我已经不会玩了。那就试着做做剧情，写好的故事，去他妈的玩法。可我也没有生活，我太久没有爱过，我都记不得上次喝醉是在哪里了，瓦伦汀的酒吧？也许是吧。

让你的角色自己去生活，想想你喜欢的那些游戏，《缺氧》玩了有400个小时，有300个小时都在当黑心老板，另外那100个在测试什么稀奇古怪的东西，最后bug一堆都进了黑洞，看看它的论坛就是一个巨大软件项目的issue页面了。也许那是feature呢？玩家恰好能利用这些漏洞，也许这本身就是游戏的一部份。就像那些速通玩家一样，他们突破了游戏里的限制见到了他们的造物主。你就等着大吃一惊吧！

说的对强尼，来，喝完这杯，我们去干死重锤！

2023.4.30 于来生
...


link: http://davidkingzyb.github.io/blogmd/41.html</description></item></channel></rss>